{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/stubs/FlashLoanBorrower.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../libraries/SafeMath.sol';\nimport '../interfaces/IFlashBorrower.sol';\nimport '../interfaces/IFlashLender.sol';\nimport '../interfaces/IRocketTokenRETH.sol';\nimport '../interfaces/IRocketDepositPool.sol';\nimport '../interfaces/IERC20.sol';\n\ncontract FlashLoanBorrower is IFlashBorrower {\n    using SafeMath for uint256;\n\n    enum Action {NORMAL, OTHER}\n\n    address owner;\n    IRocketDepositPool rocket_deposit_pool;\n    IRocketTokenRETH reth_token;\n    IFlashLender lender;\n\n    constructor(address _lender, address _reth_token_address, address _rocket_deposit_pool_address) {\n        owner = msg.sender;\n        lender = IFlashLender(_lender);\n        reth_token = IRocketTokenRETH(_reth_token_address);\n        rocket_deposit_pool = IRocketDepositPool(_rocket_deposit_pool_address);\n    }\n\n    function fund() payable external {}\n\n    // this function gets called by the lender\n    function onFlashLoan(\n        address initiator,\n        address,\n        uint256,\n        uint256 fee,\n        bytes calldata data\n    ) external override returns(bytes32) {\n        require(\n            msg.sender == address(lender),\n            \"FlashBorrower: Untrusted lender\"\n        );\n        require(\n            initiator == address(this),\n            \"FlashBorrower: Untrusted loan initiator\"\n        );\n        (Action action) = abi.decode(data, (Action));\n        if (action == Action.NORMAL) {\n            require(address(this).balance > fee, \"You need to fund the stubbed borrower with more ETH.\");\n            rocket_deposit_pool.deposit{ value: address(this).balance }();\n        } \n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n    }\n\n    function flashBorrow(\n        uint256 amount\n    ) public {\n        bytes memory data = abi.encode(Action.NORMAL);\n        uint256 _allowance = reth_token.allowance(address(this), address(lender));\n        uint256 _fee = lender.flashFee(address(reth_token), amount);\n        uint256 _repayment = amount + _fee;\n        reth_token.approve(address(lender), _allowance + _repayment);\n        lender.flashLoan(this, address(reth_token), amount, data);\n    }\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
    },
    "contracts/interfaces/IFlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IFlashBorrower {\n\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}"
    },
    "contracts/interfaces/IFlashLender.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './IFlashBorrower.sol';\n\ninterface IFlashLender {\n\n    /**\n     * @dev The amount of currency available to be lent.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(\n        address token,\n        uint256 amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IFlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}"
    },
    "contracts/interfaces/IRocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../interfaces/IERC20.sol';\n\ninterface IRocketTokenRETH is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function getTotalCollateral() external view returns (uint256);\n    function burn(uint256 _rethAmount) external returns (uint256);\n}"
    },
    "contracts/interfaces/IRocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketDepositPool {\n    function deposit() external payable;\n}"
    },
    "contracts/RocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './libraries/Counters.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IRocketStake.sol';\nimport './interfaces/IRocketStorage.sol';\nimport './interfaces/IMigrationCompatible.sol';\nimport './interfaces/IRocketDepositPool.sol';\nimport './interfaces/IRocketTokenRETH.sol';\nimport './interfaces/IFlashLender.sol';\n\ncontract RocketStake is IRocketStake, IFlashLender {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal staker_reth_balances;\n    address rocket_storage_address;\n    bytes32 public constant FLASH_LOAN_CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    constructor(\n        address _rocket_storage_address\n    ) {\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    receive() external payable {}\n\n    function stake() external payable override {\n        require(msg.value > 0, \"You must send a non-zero amount of eth to stake.\");\n\n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketDepositPool\"))));\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n\n        // deposit eth into RP and add the amount of rETH created to staker's balance\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\n        rocket_deposit_pool.deposit{ value: msg.value }();\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].add(reth_added_to_stake);\n\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, staker_reth_balances[msg.sender]);\n    }\n\n    function withdraw(uint256 eth_amount) external override {\n        require(staker_reth_balances[msg.sender] > 0, \"Nothing staked here.\");\n        require(eth_amount > 0, \"You must withdraw more than 0 ETH\");\n        \n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        \n        // ensure there is enough eth available in RP's system\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \"Not enough collateral available in Rocket Pool\");\n\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot withdraw more ETH than you have staked.\");\n\n        // burn the rETH to receive ETH via RP\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\n        uint256 starting_balance = address(this).balance;\n        rocket_token_reth.burn(reth_to_burn);\n        uint256 eth_received = address(this).balance.sub(starting_balance);\n\n        // deduct the burned rETH from the staker_reth_balances balance\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_to_burn);\n\n        // transfer staker ETH last to prevent re-entrancy\n        payable(msg.sender).transfer(eth_received);\n        emit AccountWithdraw(msg.sender, eth_received, staker_reth_balances[msg.sender]);\n    }\n\n    function migrate(\n        address next_contract_address,\n        uint256 eth_amount\n    ) override public {\n        // make sure there is a stake to migrate and that we aren't migrating into a non-existant address\n        require(staker_reth_balances[msg.sender] > 0, \"You are not staking any ETH\");\n        require(next_contract_address != address(0), \"Cannot migrate to non-existant contract\");\n\n        // setup RP\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n\n        // calculate the ETH value of our rETH staked and prevent overdrawing\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot migrate that much.\");\n\n        // find the exact amount of rETH to transfer and decrement staked_reth balance\n        uint256 reth_amount = rocket_token_reth.getRethValue(eth_amount);\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_amount);\n\n        // go through the transfer protocol, buyer beware\n        IMigrationCompatible(next_contract_address).startTransfer(reth_amount, msg.sender);\n        rocket_token_reth.transfer(next_contract_address, reth_amount);\n        IMigrationCompatible(next_contract_address).closeTransfer(reth_amount, msg.sender);\n    }\n\n    function accountStakedETH(address staker) override public view returns(uint256 staked_eth) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(staker_reth_balances[staker]);\n    }\n\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.getTotalCollateral();\n    }\n\n    function totalRETHHeld() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.balanceOf(address(this));\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function flashLoan(\n        IFlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external override returns(bool) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        require(address(rocket_token_reth) == token, 'FlashLender: Unsupported currency');\n        require(IERC20(token).transfer(address(receiver), amount), 'FlashLender: Transfer failed');\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, 0, data) == FLASH_LOAN_CALLBACK_SUCCESS, \n            'FlashLender: Callback failed'\n        );\n        require(\n            IERC20(token).transferFrom(address(receiver), address(this), amount),\n            \"FlashLender: Repay failed\"\n        );\n        return true;\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function flashFee(\n        address token,\n        uint256\n    ) external view override returns(uint256) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        require(\n            address(rocket_token_reth) == token,\n            \"FlashLender: Unsupported currency\"\n        );\n        return 0;\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function maxFlashLoan(\n        address token\n    ) external view override returns (uint256) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return token == address(rocket_token_reth) \n            ? IERC20(token).balanceOf(address(this)) \n            : 0;\n    }\n}"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary Counters {\n    struct Counter {\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}"
    },
    "contracts/interfaces/IRocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStake {\n    function stake() external payable; \n    function withdraw(uint256 eth_amount) external;\n    function totalRETHCollateral() external view returns(uint256);\n    function totalRETHHeld() external view returns(uint256);\n    function migrate(address next_contract_address, uint256 eth_amount) external;\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\n\n    event Register(address indexed staker_address);\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\n}"
    },
    "contracts/interfaces/IRocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStorage {\n    function getAddress(bytes32 _key) external view returns (address);\n}"
    },
    "contracts/interfaces/IMigrationCompatible.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IMigrationCompatible {\n    function startTransfer(uint256 reth_amount, address staker) external; \n    function closeTransfer(uint256 reth_amount, address staker) external;\n}"
    },
    "contracts/stubs/RocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface RocketTokenRETHInterface {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function burn(uint256 _rethAmount) external;\n    function mint(address _to) payable external;\n}\n\ninterface RocketDepositPoolInterface {\n    function deposit() payable external;\n}\n\ncontract RocketDepositPool is RocketDepositPoolInterface {\n    address rocket_token_reth_address;\n\n    constructor(address _rocket_token_reth_address) {\n      rocket_token_reth_address = _rocket_token_reth_address;\n    }\n\n    function deposit() payable override public {\n        RocketTokenRETHInterface(rocket_token_reth_address).mint{ value: msg.value }(msg.sender);\n    }\n}\n"
    },
    "contracts/stubs/RocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface RocketStorageInterface {\n    function getAddress(bytes32 _key) external view returns (address);\n    function setAddress(bytes32 _key, address _value) external;\n}\n\ncontract RocketStorage is RocketStorageInterface {\n    mapping(bytes32 => address)    private addresses;\n    address owner;\n\n    constructor() {\n      owner = msg.sender;\n    }\n\n    function getAddress(bytes32 _key) override public view returns (address) {\n        return addresses[_key];\n    }\n\n    function setAddress(bytes32 _key, address _value) override public {\n        require(owner == msg.sender, \"You must be the owner to do that.\");\n        addresses[_key] = _value;\n    }\n}\n"
    },
    "contracts/stubs/RocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\n\ninterface RocketTokenRETHInterface {\n    function getTotalCollateral() external view returns (uint256);\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function burn(uint256 _rethAmount) external returns(uint256);\n    function mint(address _to) payable external;\n}\n\ncontract RocketTokenRETH is RocketTokenRETHInterface, ERC20 {\n    using SafeMath for uint256;\n\n    address owner;\n    uint256 collateral = 100 ether;\n\n    constructor() ERC20(\"RocketTokenRETH\", \"rETH\") {\n      owner = msg.sender;\n    }\n\n    function updateTotalCollateral(uint256 _collateral) public {\n      require(msg.sender == owner, \"You must be the owner to do that.\");\n      collateral = _collateral;\n    }\n\n    function getTotalCollateral() public override view returns(uint256) {\n      return collateral;\n    }\n\n    function getEthValue(uint256 _rethAmount) public override view returns(uint256) {\n      if (totalSupply() == 0) {\n        return 0;\n      }\n      return (address(this).balance.mul(_rethAmount)).div(totalSupply());\n    }\n\n    function getRethValue(uint256 _ethAmount) public override view returns(uint256) {\n      if (totalSupply() == 0) {\n        return _ethAmount;\n      }\n      return (totalSupply().mul(_ethAmount)).div(address(this).balance);\n    }\n\n    function distributeRewards() payable override public {\n\n    }\n\n    function drain(uint256 amount) public {\n      require(msg.sender == owner, \"You must be the owner to do that.\");\n      payable(address(0)).transfer(amount);\n    }\n\n    function burn(uint256 _rethAmount) override public returns(uint256) {\n      require(_rethAmount > 0, \"Invalid token burn amount\");\n      require(balanceOf(msg.sender) >= _rethAmount, \"Insufficient rETH balance\");\n      uint256 ethAmount = getEthValue(_rethAmount);\n      _burn(msg.sender, _rethAmount);\n      payable(msg.sender).transfer(ethAmount);\n      return ethAmount;\n    }\n\n    function mint(address _to) payable override public {\n      uint256 rETHValue;\n      if (totalSupply() == 0) {\n        rETHValue = msg.value;\n      } else {\n        rETHValue = totalSupply()\n          .mul(msg.value)\n          .div(address(this).balance.sub(msg.value));\n      }\n      _mint(_to, rETHValue);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}