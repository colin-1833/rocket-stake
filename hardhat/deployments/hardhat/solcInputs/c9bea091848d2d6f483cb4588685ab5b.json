{
  "language": "Solidity",
  "sources": {
    "contracts/stubs/FlashLoanBorrower.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../libraries/SafeMath.sol';\nimport '../interfaces/IFlashBorrower.sol';\nimport '../interfaces/IFlashLender.sol';\nimport '../interfaces/IRocketTokenRETH.sol';\nimport '../interfaces/IRocketDepositPool.sol';\nimport '../interfaces/IERC20.sol';\n\ncontract FlashLoanBorrower is IFlashBorrower {\n    using SafeMath for uint256;\n\n    enum Action {NORMAL, OTHER}\n\n    address owner;\n    uint256 loans_made;\n    IRocketDepositPool rocket_deposit_pool;\n    IRocketTokenRETH reth_token;\n    IFlashLender lender;\n\n    constructor(address _lender, address _reth_token_address, address _rocket_deposit_pool_address) {\n        owner = msg.sender;\n        lender = IFlashLender(_lender);\n        reth_token = IRocketTokenRETH(_reth_token_address);\n        rocket_deposit_pool = IRocketDepositPool(_rocket_deposit_pool_address);\n    }\n\n    // this function gets called by the lender\n    function onFlashLoan(\n        address initiator,\n        address,\n        uint256,\n        uint256,\n        bytes calldata data\n    ) external override returns(bytes32) {\n        require(\n            msg.sender == address(lender),\n            \"FlashBorrower: Untrusted lender\"\n        );\n        require(\n            initiator == address(this),\n            \"FlashBorrower: Untrusted loan initiator\"\n        );\n        (Action action) = abi.decode(data, (Action));\n        if (action == Action.NORMAL) {\n            // normally the borrower would need some strategy to 'aquire' more tokens so they can cover the loan fee,\n            // however, since we have no fee, there is no such need\n            loans_made = loans_made.add(1);\n        } \n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n    }\n\n    function flashBorrow(\n        uint256 amount\n    ) public {\n        bytes memory data = abi.encode(Action.NORMAL);\n        uint256 _allowance = reth_token.allowance(address(this), address(lender));\n        uint256 _fee = lender.flashFee(address(reth_token), amount);\n        uint256 _repayment = amount + _fee;\n        reth_token.approve(address(lender), _allowance + _repayment);\n        lender.flashLoan(this, address(reth_token), amount, data);\n    }\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
    },
    "contracts/interfaces/IFlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IFlashBorrower {\n\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}"
    },
    "contracts/interfaces/IFlashLender.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './IFlashBorrower.sol';\n\ninterface IFlashLender {\n\n    /**\n     * @dev The amount of currency available to be lent.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(\n        address token,\n        uint256 amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IFlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}"
    },
    "contracts/interfaces/IRocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../interfaces/IERC20.sol';\n\ninterface IRocketTokenRETH is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function getTotalCollateral() external view returns (uint256);\n    function burn(uint256 _rethAmount) external returns (uint256);\n}"
    },
    "contracts/interfaces/IRocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketDepositPool {\n    function deposit() external payable;\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}