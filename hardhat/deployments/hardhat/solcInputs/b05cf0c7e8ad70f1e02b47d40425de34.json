{
  "language": "Solidity",
  "sources": {
    "contracts/RocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './libraries/Counters.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IRocketStake.sol';\nimport './interfaces/IRocketStorage.sol';\nimport './interfaces/IMigrationCompatible.sol';\nimport './interfaces/IRocketDepositPool.sol';\nimport './interfaces/IRocketTokenRETH.sol';\nimport './interfaces/IFlashLender.sol';\n\ncontract RocketStake is IRocketStake, IFlashLender {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal staker_reth_balances;\n    address rocket_storage_address;\n    bytes32 public constant FLASH_LOAN_CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    constructor(address _rocket_storage_address) {\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    receive() external payable {}\n\n    function stake() external payable override {\n        require(msg.value > 0, \"You must send a non-zero amount of eth to stake.\");\n\n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketDepositPool\"))));\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n\n        // deposit eth into RP and add the amount of rETH created to staker's balance\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\n        rocket_deposit_pool.deposit{ value: msg.value }();\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].add(reth_added_to_stake);\n\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, staker_reth_balances[msg.sender]);\n    }\n\n    function withdraw(uint256 eth_amount) external override {\n        require(staker_reth_balances[msg.sender] > 0, \"Nothing staked here.\");\n        require(eth_amount > 0, \"You must withdraw more than 0 ETH\");\n        \n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        \n        // ensure there is enough eth available in RP's system\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \"Not enough collateral available in Rocket Pool\");\n\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot withdraw more ETH than you have staked.\");\n\n        // burn the rETH to receive ETH via RP\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\n        uint256 starting_balance = address(this).balance;\n        rocket_token_reth.burn(reth_to_burn);\n        uint256 eth_received = address(this).balance.sub(starting_balance);\n\n        // deduct the burned rETH from the staker_reth_balances balance\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_to_burn);\n\n        // transfer staker ETH last to prevent re-entrancy\n        payable(msg.sender).transfer(eth_received);\n        emit AccountWithdraw(msg.sender, eth_received, staker_reth_balances[msg.sender]);\n    }\n\n    function migrate(\n        address next_contract_address,\n        uint256 eth_amount\n    ) override public {\n        // make sure there is a stake to migrate and that we aren't migrating into a non-existant address\n        require(staker_reth_balances[msg.sender] > 0, \"You are not staking any ETH\");\n        require(next_contract_address != address(0), \"Cannot migrate to non-existant contract\");\n\n        // setup RP\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n\n        // calculate the ETH value of our rETH staked and prevent overdrawing\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot migrate that much.\");\n\n        // find the exact amount of rETH to transfer and decrement staked_reth balance\n        uint256 reth_amount = rocket_token_reth.getRethValue(eth_amount);\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_amount);\n\n        // go through the transfer protocol, buyer beware\n        IMigrationCompatible(next_contract_address).startTransfer(reth_amount, msg.sender);\n        rocket_token_reth.transfer(next_contract_address, reth_amount);\n        IMigrationCompatible(next_contract_address).closeTransfer(reth_amount, msg.sender);\n    }\n\n    function accountStakedETH(address staker) override public view returns(uint256 staked_eth) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(staker_reth_balances[staker]);\n    }\n\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.getTotalCollateral();\n    }\n\n    function totalRETHHeld() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.balanceOf(address(this));\n    }\n\n    function totalETHHeld() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(rocket_token_reth.balanceOf(address(this)));\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function flashLoan(\n        IFlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external override returns(bool) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        require(address(rocket_token_reth) == token, 'FlashLender: Unsupported currency');\n        require(IERC20(token).transfer(address(receiver), amount), 'FlashLender: Transfer failed');\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, 0, data) == FLASH_LOAN_CALLBACK_SUCCESS, \n            'FlashLender: Callback failed'\n        );\n        require(\n            IERC20(token).transferFrom(address(receiver), address(this), amount),\n            \"FlashLender: Repay failed\"\n        );\n        return true;\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function flashFee(\n        address token,\n        uint256\n    ) external view override returns(uint256) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        require(\n            address(rocket_token_reth) == token,\n            \"FlashLender: Unsupported currency\"\n        );\n        return 0;\n    }\n\n    // https://eips.ethereum.org/EIPS/eip-3156\n    function maxFlashLoan(\n        address token\n    ) external view override returns (uint256) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"RocketTokenRETH\"))));\n        return token == address(rocket_token_reth) \n            ? IERC20(token).balanceOf(address(this)) \n            : 0;\n    }\n}"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary Counters {\n    struct Counter {\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IRocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStake {\n    function stake() external payable; \n    function withdraw(uint256 eth_amount) external;\n    function totalRETHCollateral() external view returns(uint256);\n    function totalRETHHeld() external view returns(uint256);\n    function totalETHHeld() external view returns(uint256);\n    function migrate(address next_contract_address, uint256 eth_amount) external;\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\n\n    event Register(address indexed staker_address);\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\n}"
    },
    "contracts/interfaces/IRocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStorage {\n    function getAddress(bytes32 _key) external view returns (address);\n}"
    },
    "contracts/interfaces/IMigrationCompatible.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IMigrationCompatible {\n    function startTransfer(uint256 reth_amount, address staker) external; \n    function closeTransfer(uint256 reth_amount, address staker) external;\n}"
    },
    "contracts/interfaces/IRocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketDepositPool {\n    function deposit() external payable;\n}"
    },
    "contracts/interfaces/IRocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../interfaces/IERC20.sol';\n\ninterface IRocketTokenRETH is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function getTotalCollateral() external view returns (uint256);\n    function burn(uint256 _rethAmount) external returns (uint256);\n}"
    },
    "contracts/interfaces/IFlashLender.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './IFlashBorrower.sol';\n\ninterface IFlashLender {\n\n    /**\n     * @dev The amount of currency available to be lent.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(\n        address token,\n        uint256 amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IFlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}"
    },
    "contracts/interfaces/IFlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IFlashBorrower {\n\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}