{
  "address": "0x62eE66a52629392A3B1A33A93f43ACE53A3252b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AccountWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AddStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLASH_LOAN_CALLBACK_SUCCESS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountStakedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_eth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashBorrower",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1092f2452f09f780e0324377741f3064ee4cffd704cfe39f1ab52082cc3b7e07",
  "receipt": {
    "to": null,
    "from": "0x173a867F4D8C5492b2Ad8d756870e2186232f73c",
    "contractAddress": "0x62eE66a52629392A3B1A33A93f43ACE53A3252b9",
    "transactionIndex": 0,
    "gasUsed": "2585460",
    "logsBloom": "0x
    "blockHash": "0x41cf820a610946310f0e3267143a14f555d6a239be82b7fff05e0a09e3e87988",
    "transactionHash": "0x1092f2452f09f780e0324377741f3064ee4cffd704cfe39f1ab52082cc3b7e07",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2585460",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf197302670E60317fF9e27521ff376F122D4b44a"
  ],
  "solcInputHash": "b05cf0c7e8ad70f1e02b47d40425de34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AccountWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AddStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_LOAN_CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountStakedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Initiate a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"receiver\":\"The receiver of the tokens in the loan, and the receiver of the callback.\",\"token\":\"The loan currency.\"}},\"maxFlashLoan(address)\":{\"details\":\"The amount of currency available to be lent.\",\"params\":{\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` that can be borrowed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketStake.sol\":\"RocketStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './libraries/Counters.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRocketStake.sol';\\nimport './interfaces/IRocketStorage.sol';\\nimport './interfaces/IMigrationCompatible.sol';\\nimport './interfaces/IRocketDepositPool.sol';\\nimport './interfaces/IRocketTokenRETH.sol';\\nimport './interfaces/IFlashLender.sol';\\n\\ncontract RocketStake is IRocketStake, IFlashLender {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal staker_reth_balances;\\n    address rocket_storage_address;\\n    bytes32 public constant FLASH_LOAN_CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n    }\\n\\n    receive() external payable {}\\n\\n    function stake() external payable override {\\n        require(msg.value > 0, \\\"You must send a non-zero amount of eth to stake.\\\");\\n\\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketDepositPool\\\"))));\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n\\n        // deposit eth into RP and add the amount of rETH created to staker's balance\\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\\n        rocket_deposit_pool.deposit{ value: msg.value }();\\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].add(reth_added_to_stake);\\n\\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, staker_reth_balances[msg.sender]);\\n    }\\n\\n    function withdraw(uint256 eth_amount) external override {\\n        require(staker_reth_balances[msg.sender] > 0, \\\"Nothing staked here.\\\");\\n        require(eth_amount > 0, \\\"You must withdraw more than 0 ETH\\\");\\n        \\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        \\n        // ensure there is enough eth available in RP's system\\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \\\"Not enough collateral available in Rocket Pool\\\");\\n\\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot withdraw more ETH than you have staked.\\\");\\n\\n        // burn the rETH to receive ETH via RP\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n        uint256 starting_balance = address(this).balance;\\n        rocket_token_reth.burn(reth_to_burn);\\n        uint256 eth_received = address(this).balance.sub(starting_balance);\\n\\n        // deduct the burned rETH from the staker_reth_balances balance\\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_to_burn);\\n\\n        // transfer staker ETH last to prevent re-entrancy\\n        payable(msg.sender).transfer(eth_received);\\n        emit AccountWithdraw(msg.sender, eth_received, staker_reth_balances[msg.sender]);\\n    }\\n\\n    function migrate(\\n        address next_contract_address,\\n        uint256 eth_amount\\n    ) override public {\\n        // make sure there is a stake to migrate and that we aren't migrating into a non-existant address\\n        require(staker_reth_balances[msg.sender] > 0, \\\"You are not staking any ETH\\\");\\n        require(next_contract_address != address(0), \\\"Cannot migrate to non-existant contract\\\");\\n\\n        // setup RP\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n\\n        // calculate the ETH value of our rETH staked and prevent overdrawing\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(staker_reth_balances[msg.sender]);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot migrate that much.\\\");\\n\\n        // find the exact amount of rETH to transfer and decrement staked_reth balance\\n        uint256 reth_amount = rocket_token_reth.getRethValue(eth_amount);\\n        staker_reth_balances[msg.sender] = staker_reth_balances[msg.sender].sub(reth_amount);\\n\\n        // go through the transfer protocol, buyer beware\\n        IMigrationCompatible(next_contract_address).startTransfer(reth_amount, msg.sender);\\n        rocket_token_reth.transfer(next_contract_address, reth_amount);\\n        IMigrationCompatible(next_contract_address).closeTransfer(reth_amount, msg.sender);\\n    }\\n\\n    function accountStakedETH(address staker) override public view returns(uint256 staked_eth) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(staker_reth_balances[staker]);\\n    }\\n\\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        return rocket_token_reth.getTotalCollateral();\\n    }\\n\\n    function totalRETHHeld() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        return rocket_token_reth.balanceOf(address(this));\\n    }\\n\\n    function totalETHHeld() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(rocket_token_reth.balanceOf(address(this)));\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-3156\\n    function flashLoan(\\n        IFlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override returns(bool) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        require(address(rocket_token_reth) == token, 'FlashLender: Unsupported currency');\\n        require(IERC20(token).transfer(address(receiver), amount), 'FlashLender: Transfer failed');\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, 0, data) == FLASH_LOAN_CALLBACK_SUCCESS, \\n            'FlashLender: Callback failed'\\n        );\\n        require(\\n            IERC20(token).transferFrom(address(receiver), address(this), amount),\\n            \\\"FlashLender: Repay failed\\\"\\n        );\\n        return true;\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-3156\\n    function flashFee(\\n        address token,\\n        uint256\\n    ) external view override returns(uint256) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        require(\\n            address(rocket_token_reth) == token,\\n            \\\"FlashLender: Unsupported currency\\\"\\n        );\\n        return 0;\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-3156\\n    function maxFlashLoan(\\n        address token\\n    ) external view override returns (uint256) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"))));\\n        return token == address(rocket_token_reth) \\n            ? IERC20(token).balanceOf(address(this)) \\n            : 0;\\n    }\\n}\",\"keccak256\":\"0x6b108e08836c57b2459239afee9da576c3080b96bc3d25a7823292d5bb38e192\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x5bbe210d3ee7f8913d5ab8cc3543f6b073e085f7e234632861d5e5ae99cf0712\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IFlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\",\"keccak256\":\"0x2508dbb9623f0e9958121bd31670086c0d381a3de856d26443fd60839a41dbb5\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IFlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './IFlashBorrower.sol';\\n\\ninterface IFlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IFlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xe646e328d9163cfbe2c1e0f78e5b4906a7fbbe3e510b112bdc8a7ea6f1f317e3\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IMigrationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IMigrationCompatible {\\n    function startTransfer(uint256 reth_amount, address staker) external; \\n    function closeTransfer(uint256 reth_amount, address staker) external;\\n}\",\"keccak256\":\"0xdc521df01124b36fb12bbe8f4eac66c2663b23f455d908b727eb6d8a3910a601\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketDepositPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketDepositPool {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xb5bd33ff314d42c78c158ba13089d59e460f059acfa340f670caf01cef9b59ca\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStake {\\n    function stake() external payable; \\n    function withdraw(uint256 eth_amount) external;\\n    function totalRETHCollateral() external view returns(uint256);\\n    function totalRETHHeld() external view returns(uint256);\\n    function totalETHHeld() external view returns(uint256);\\n    function migrate(address next_contract_address, uint256 eth_amount) external;\\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\\n\\n    event Register(address indexed staker_address);\\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\\n}\",\"keccak256\":\"0x5eb175861b0d5f16b814952d20b72ed6b920f2e56482e239f4453c1ef113949b\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStorage {\\n    function getAddress(bytes32 _key) external view returns (address);\\n}\",\"keccak256\":\"0x857e9f152d75e925d3095c1b6bc6acb220c8b735f6df06a421012bb28a3e1b4e\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketTokenRETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n    function distributeRewards() payable external;\\n    function getTotalCollateral() external view returns (uint256);\\n    function burn(uint256 _rethAmount) external returns (uint256);\\n}\",\"keccak256\":\"0x4104ac5b3685a5f02b9dbe3c036cf985ac5c19f23c67bcb3150f11199a63410d\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x28482f213b4aabbe37903f331f1f240271d5cc3bc7a2c20fc3cdf0e4380d7788\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0x49990db7278b36c87d44c53dc2a9f306d5304a35a4e3add09305dbc844af920b\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e9a38038062002e9a833981810160405281019062000037919062000096565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000110565b6000815190506200009081620000f6565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000d6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010181620000c2565b81146200010d57600080fd5b50565b612d7a80620001206000396000f3fe6080604052600436106100a05760003560e01c806375d9ad1b1161006457806375d9ad1b14610184578063ab442828146101af578063ad68ebf7146101ec578063d9d98ce414610215578063df58358f14610252578063dff173571461027d576100a7565b80632accfc04146100ac5780632e1a7d4d146100d75780633a4b66f1146101005780635cffe9de1461010a578063613255ab14610147576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100c16102a8565b6040516100ce9190612ab1565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190612276565b610499565b005b610108610aa9565b005b34801561011657600080fd5b50610131600480360381019061012c91906121f6565b610f32565b60405161013e91906128fb565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190612116565b611319565b60405161017b9190612ab1565b60405180910390f35b34801561019057600080fd5b506101996114bf565b6040516101a69190612916565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d19190612116565b6114e3565b6040516101e39190612ab1565b60405180910390f35b3480156101f857600080fd5b50610213600480360381019061020e9190612168565b61168c565b005b34801561022157600080fd5b5061023c60048036038101906102379190612168565b611bf3565b6040516102499190612ab1565b60405180910390f35b34801561025e57600080fd5b50610267611d46565b6040516102749190612ab1565b60405180910390f35b34801561028957600080fd5b50610292611ea4565b60405161029f9190612ab1565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016102fd906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161032f9190612916565b60206040518083038186803b15801561034757600080fd5b505afa15801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa238273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103d69190612824565b60206040518083038186803b1580156103ee57600080fd5b505afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610426919061229f565b6040518263ffffffff1660e01b81526004016104429190612ab1565b60206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610492919061229f565b9250505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161051a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610511906129f1565b60405180910390fd5b6000811161055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055490612a71565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016105b1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105e39190612916565b60206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610633919061213f565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b4919061229f565b10156106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90612971565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b815260040161076e9190612ab1565b60206040518083038186803b15801561078657600080fd5b505afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be919061229f565b905080841115610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa90612a11565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040161083e9190612ab1565b60206040518083038186803b15801561085657600080fd5b505afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e919061229f565b905060004790508373ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b81526004016108ce9190612ab1565b602060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610920919061229f565b506000610936824761200d90919063ffffffff16565b9050610989836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a11573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d8826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610a98929190612af5565b60405180910390a250505050505050565b60003411610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae390612931565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610b4090612804565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610b729190612916565b60206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc2919061213f565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610bf1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c239190612916565b60206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061213f565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cb09190612824565b60206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d00919061229f565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d9e9190612824565b60206040518083038186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dee919061229f565b90506000610e05838361200d90919063ffffffff16565b9050610e58816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461202390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec82346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610f2293929190612b1e565b60405180910390a2505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610f87906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610fb99190612916565b60206040518083038186803b158015610fd157600080fd5b505afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611009919061213f565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107090612951565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89886040518363ffffffff1660e01b81526004016110b49291906128d2565b602060405180830381600087803b1580156110ce57600080fd5b505af11580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110691906121a4565b611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612a51565b60405180910390fd5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98873ffffffffffffffffffffffffffffffffffffffff166323e30c8b338a8a60008b8b6040518763ffffffff1660e01b81526004016111aa96959493929190612876565b602060405180830381600087803b1580156111c457600080fd5b505af11580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc91906121cd565b1461123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390612991565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd8930896040518463ffffffff1660e01b81526004016112799392919061283f565b602060405180830381600087803b15801561129357600080fd5b505af11580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb91906121a4565b61130a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611301906129b1565b60405180910390fd5b60019250505095945050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161136e906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016113a09190612916565b60206040518083038186803b1580156113b857600080fd5b505afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f0919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461142c5760006114b6565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114659190612824565b60206040518083038186803b15801561147d57600080fd5b505afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b5919061229f565b5b92505050919050565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611538906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161156a9190612916565b60206040518083038186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016116339190612ab1565b60206040518083038186803b15801561164b57600080fd5b505afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611683919061229f565b92505050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161170d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170490612a31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561177d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611774906129d1565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016117d1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016118039190612916565b60206040518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611853919061213f565b905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016118ce9190612ab1565b60206040518083038186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e919061229f565b905080841115611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a90612a91565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040161199e9190612ab1565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee919061229f565b9050611a41816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b8152600401611abe929190612acc565b600060405180830381600087803b158015611ad857600080fd5b505af1158015611aec573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b8152600401611b2b9291906128d2565b602060405180830381600087803b158015611b4557600080fd5b505af1158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d91906121a4565b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401611bb9929190612acc565b600060405180830381600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b50505050505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611c48906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611c7a9190612916565b60206040518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca919061213f565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3190612951565b60405180910390fd5b60009250505092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611d9b906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611dcd9190612916565b60206040518083038186803b158015611de557600080fd5b505afa158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6557600080fd5b505afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d919061229f565b9250505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611ef9906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f2b9190612916565b60206040518083038186803b158015611f4357600080fd5b505afa158015611f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7b919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fb69190612824565b60206040518083038186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612006919061229f565b9250505090565b6000818361201b9190612bd8565b905092915050565b600081836120319190612b82565b905092915050565b60008135905061204881612cd1565b92915050565b60008151905061205d81612cd1565b92915050565b60008151905061207281612ce8565b92915050565b60008151905061208781612cff565b92915050565b60008083601f84011261209f57600080fd5b8235905067ffffffffffffffff8111156120b857600080fd5b6020830191508360018202830111156120d057600080fd5b9250929050565b6000813590506120e681612d16565b92915050565b6000813590506120fb81612d2d565b92915050565b60008151905061211081612d2d565b92915050565b60006020828403121561212857600080fd5b600061213684828501612039565b91505092915050565b60006020828403121561215157600080fd5b600061215f8482850161204e565b91505092915050565b6000806040838503121561217b57600080fd5b600061218985828601612039565b925050602061219a858286016120ec565b9150509250929050565b6000602082840312156121b657600080fd5b60006121c484828501612063565b91505092915050565b6000602082840312156121df57600080fd5b60006121ed84828501612078565b91505092915050565b60008060008060006080868803121561220e57600080fd5b600061221c888289016120d7565b955050602061222d88828901612039565b945050604061223e888289016120ec565b935050606086013567ffffffffffffffff81111561225b57600080fd5b6122678882890161208d565b92509250509295509295909350565b60006020828403121561228857600080fd5b6000612296848285016120ec565b91505092915050565b6000602082840312156122b157600080fd5b60006122bf84828501612101565b91505092915050565b6122d181612c0c565b82525050565b6122e081612c1e565b82525050565b6122ef81612c2a565b82525050565b60006123018385612b55565b935061230e838584612c82565b61231783612cc0565b840190509392505050565b61232b81612c70565b82525050565b600061233e603083612b66565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006123a4602183612b66565b91507f466c6173684c656e6465723a20556e737570706f727465642063757272656e6360008301527f79000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061240a602e83612b66565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b6000612470601c83612b66565b91507f466c6173684c656e6465723a2043616c6c6261636b206661696c6564000000006000830152602082019050919050565b60006124b0601983612b66565b91507f466c6173684c656e6465723a205265706179206661696c6564000000000000006000830152602082019050919050565b60006124f0602783612b66565b91507f43616e6e6f74206d69677261746520746f206e6f6e2d6578697374616e74206360008301527f6f6e7472616374000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612556601483612b66565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b6000612596603283612b66565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b60006125fc601b83612b66565b91507f596f7520617265206e6f74207374616b696e6720616e792045544800000000006000830152602082019050919050565b600061263c601c83612b66565b91507f466c6173684c656e6465723a205472616e73666572206661696c6564000000006000830152602082019050919050565b600061267c601083612b77565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b60006126bc600f83612b77565b91507f526f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b60006126fc601183612b77565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b600061273c602183612b66565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127a2601d83612b66565b91507f596f752063616e6e6f74206d6967726174652074686174206d7563682e0000006000830152602082019050919050565b6127de81612c66565b82525050565b60006127ef8261266f565b91506127fa826126af565b9150819050919050565b600061280f8261266f565b915061281a826126ef565b9150819050919050565b600060208201905061283960008301846122c8565b92915050565b600060608201905061285460008301866122c8565b61286160208301856122c8565b61286e60408301846127d5565b949350505050565b600060a08201905061288b60008301896122c8565b61289860208301886122c8565b6128a560408301876127d5565b6128b26060830186612322565b81810360808301526128c58184866122f5565b9050979650505050505050565b60006040820190506128e760008301856122c8565b6128f460208301846127d5565b9392505050565b600060208201905061291060008301846122d7565b92915050565b600060208201905061292b60008301846122e6565b92915050565b6000602082019050818103600083015261294a81612331565b9050919050565b6000602082019050818103600083015261296a81612397565b9050919050565b6000602082019050818103600083015261298a816123fd565b9050919050565b600060208201905081810360008301526129aa81612463565b9050919050565b600060208201905081810360008301526129ca816124a3565b9050919050565b600060208201905081810360008301526129ea816124e3565b9050919050565b60006020820190508181036000830152612a0a81612549565b9050919050565b60006020820190508181036000830152612a2a81612589565b9050919050565b60006020820190508181036000830152612a4a816125ef565b9050919050565b60006020820190508181036000830152612a6a8161262f565b9050919050565b60006020820190508181036000830152612a8a8161272f565b9050919050565b60006020820190508181036000830152612aaa81612795565b9050919050565b6000602082019050612ac660008301846127d5565b92915050565b6000604082019050612ae160008301856127d5565b612aee60208301846122c8565b9392505050565b6000604082019050612b0a60008301856127d5565b612b1760208301846127d5565b9392505050565b6000606082019050612b3360008301866127d5565b612b4060208301856127d5565b612b4d60408301846127d5565b949350505050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b8d82612c66565b9150612b9883612c66565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bcd57612bcc612c91565b5b828201905092915050565b6000612be382612c66565b9150612bee83612c66565b925082821015612c0157612c00612c91565b5b828203905092915050565b6000612c1782612c46565b9050919050565b60008115159050919050565b6000819050919050565b6000612c3f82612c0c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c7b82612c66565b9050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b612cda81612c0c565b8114612ce557600080fd5b50565b612cf181612c1e565b8114612cfc57600080fd5b50565b612d0881612c2a565b8114612d1357600080fd5b50565b612d1f81612c34565b8114612d2a57600080fd5b50565b612d3681612c66565b8114612d4157600080fd5b5056fea264697066735822122086e1cb2d75c6396cbf3f2d60210e10ea479525e8ba786e219abeca3dff733d4a64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c806375d9ad1b1161006457806375d9ad1b14610184578063ab442828146101af578063ad68ebf7146101ec578063d9d98ce414610215578063df58358f14610252578063dff173571461027d576100a7565b80632accfc04146100ac5780632e1a7d4d146100d75780633a4b66f1146101005780635cffe9de1461010a578063613255ab14610147576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100c16102a8565b6040516100ce9190612ab1565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190612276565b610499565b005b610108610aa9565b005b34801561011657600080fd5b50610131600480360381019061012c91906121f6565b610f32565b60405161013e91906128fb565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190612116565b611319565b60405161017b9190612ab1565b60405180910390f35b34801561019057600080fd5b506101996114bf565b6040516101a69190612916565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d19190612116565b6114e3565b6040516101e39190612ab1565b60405180910390f35b3480156101f857600080fd5b50610213600480360381019061020e9190612168565b61168c565b005b34801561022157600080fd5b5061023c60048036038101906102379190612168565b611bf3565b6040516102499190612ab1565b60405180910390f35b34801561025e57600080fd5b50610267611d46565b6040516102749190612ab1565b60405180910390f35b34801561028957600080fd5b50610292611ea4565b60405161029f9190612ab1565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016102fd906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161032f9190612916565b60206040518083038186803b15801561034757600080fd5b505afa15801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa238273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103d69190612824565b60206040518083038186803b1580156103ee57600080fd5b505afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610426919061229f565b6040518263ffffffff1660e01b81526004016104429190612ab1565b60206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610492919061229f565b9250505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161051a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610511906129f1565b60405180910390fd5b6000811161055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055490612a71565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016105b1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105e39190612916565b60206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610633919061213f565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b4919061229f565b10156106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90612971565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b815260040161076e9190612ab1565b60206040518083038186803b15801561078657600080fd5b505afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be919061229f565b905080841115610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa90612a11565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040161083e9190612ab1565b60206040518083038186803b15801561085657600080fd5b505afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e919061229f565b905060004790508373ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b81526004016108ce9190612ab1565b602060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610920919061229f565b506000610936824761200d90919063ffffffff16565b9050610989836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a11573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d8826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610a98929190612af5565b60405180910390a250505050505050565b60003411610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae390612931565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610b4090612804565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610b729190612916565b60206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc2919061213f565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610bf1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c239190612916565b60206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c73919061213f565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cb09190612824565b60206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d00919061229f565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d9e9190612824565b60206040518083038186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dee919061229f565b90506000610e05838361200d90919063ffffffff16565b9050610e58816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461202390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec82346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610f2293929190612b1e565b60405180910390a2505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001610f87906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610fb99190612916565b60206040518083038186803b158015610fd157600080fd5b505afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611009919061213f565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107090612951565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89886040518363ffffffff1660e01b81526004016110b49291906128d2565b602060405180830381600087803b1580156110ce57600080fd5b505af11580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110691906121a4565b611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612a51565b60405180910390fd5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98873ffffffffffffffffffffffffffffffffffffffff166323e30c8b338a8a60008b8b6040518763ffffffff1660e01b81526004016111aa96959493929190612876565b602060405180830381600087803b1580156111c457600080fd5b505af11580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc91906121cd565b1461123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390612991565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd8930896040518463ffffffff1660e01b81526004016112799392919061283f565b602060405180830381600087803b15801561129357600080fd5b505af11580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb91906121a4565b61130a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611301906129b1565b60405180910390fd5b60019250505095945050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161136e906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016113a09190612916565b60206040518083038186803b1580156113b857600080fd5b505afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f0919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461142c5760006114b6565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114659190612824565b60206040518083038186803b15801561147d57600080fd5b505afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b5919061229f565b5b92505050919050565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611538906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161156a9190612916565b60206040518083038186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016116339190612ab1565b60206040518083038186803b15801561164b57600080fd5b505afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611683919061229f565b92505050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161170d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170490612a31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561177d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611774906129d1565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016117d1906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016118039190612916565b60206040518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611853919061213f565b905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016118ce9190612ab1565b60206040518083038186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e919061229f565b905080841115611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a90612a91565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040161199e9190612ab1565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee919061229f565b9050611a41816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200d90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b8152600401611abe929190612acc565b600060405180830381600087803b158015611ad857600080fd5b505af1158015611aec573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b8152600401611b2b9291906128d2565b602060405180830381600087803b158015611b4557600080fd5b505af1158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d91906121a4565b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401611bb9929190612acc565b600060405180830381600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b50505050505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611c48906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611c7a9190612916565b60206040518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca919061213f565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3190612951565b60405180910390fd5b60009250505092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611d9b906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611dcd9190612916565b60206040518083038186803b158015611de557600080fd5b505afa158015611df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1d919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6557600080fd5b505afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d919061229f565b9250505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001611ef9906127e4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f2b9190612916565b60206040518083038186803b158015611f4357600080fd5b505afa158015611f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7b919061213f565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fb69190612824565b60206040518083038186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612006919061229f565b9250505090565b6000818361201b9190612bd8565b905092915050565b600081836120319190612b82565b905092915050565b60008135905061204881612cd1565b92915050565b60008151905061205d81612cd1565b92915050565b60008151905061207281612ce8565b92915050565b60008151905061208781612cff565b92915050565b60008083601f84011261209f57600080fd5b8235905067ffffffffffffffff8111156120b857600080fd5b6020830191508360018202830111156120d057600080fd5b9250929050565b6000813590506120e681612d16565b92915050565b6000813590506120fb81612d2d565b92915050565b60008151905061211081612d2d565b92915050565b60006020828403121561212857600080fd5b600061213684828501612039565b91505092915050565b60006020828403121561215157600080fd5b600061215f8482850161204e565b91505092915050565b6000806040838503121561217b57600080fd5b600061218985828601612039565b925050602061219a858286016120ec565b9150509250929050565b6000602082840312156121b657600080fd5b60006121c484828501612063565b91505092915050565b6000602082840312156121df57600080fd5b60006121ed84828501612078565b91505092915050565b60008060008060006080868803121561220e57600080fd5b600061221c888289016120d7565b955050602061222d88828901612039565b945050604061223e888289016120ec565b935050606086013567ffffffffffffffff81111561225b57600080fd5b6122678882890161208d565b92509250509295509295909350565b60006020828403121561228857600080fd5b6000612296848285016120ec565b91505092915050565b6000602082840312156122b157600080fd5b60006122bf84828501612101565b91505092915050565b6122d181612c0c565b82525050565b6122e081612c1e565b82525050565b6122ef81612c2a565b82525050565b60006123018385612b55565b935061230e838584612c82565b61231783612cc0565b840190509392505050565b61232b81612c70565b82525050565b600061233e603083612b66565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006123a4602183612b66565b91507f466c6173684c656e6465723a20556e737570706f727465642063757272656e6360008301527f79000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061240a602e83612b66565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b6000612470601c83612b66565b91507f466c6173684c656e6465723a2043616c6c6261636b206661696c6564000000006000830152602082019050919050565b60006124b0601983612b66565b91507f466c6173684c656e6465723a205265706179206661696c6564000000000000006000830152602082019050919050565b60006124f0602783612b66565b91507f43616e6e6f74206d69677261746520746f206e6f6e2d6578697374616e74206360008301527f6f6e7472616374000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612556601483612b66565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b6000612596603283612b66565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b60006125fc601b83612b66565b91507f596f7520617265206e6f74207374616b696e6720616e792045544800000000006000830152602082019050919050565b600061263c601c83612b66565b91507f466c6173684c656e6465723a205472616e73666572206661696c6564000000006000830152602082019050919050565b600061267c601083612b77565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b60006126bc600f83612b77565b91507f526f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b60006126fc601183612b77565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b600061273c602183612b66565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127a2601d83612b66565b91507f596f752063616e6e6f74206d6967726174652074686174206d7563682e0000006000830152602082019050919050565b6127de81612c66565b82525050565b60006127ef8261266f565b91506127fa826126af565b9150819050919050565b600061280f8261266f565b915061281a826126ef565b9150819050919050565b600060208201905061283960008301846122c8565b92915050565b600060608201905061285460008301866122c8565b61286160208301856122c8565b61286e60408301846127d5565b949350505050565b600060a08201905061288b60008301896122c8565b61289860208301886122c8565b6128a560408301876127d5565b6128b26060830186612322565b81810360808301526128c58184866122f5565b9050979650505050505050565b60006040820190506128e760008301856122c8565b6128f460208301846127d5565b9392505050565b600060208201905061291060008301846122d7565b92915050565b600060208201905061292b60008301846122e6565b92915050565b6000602082019050818103600083015261294a81612331565b9050919050565b6000602082019050818103600083015261296a81612397565b9050919050565b6000602082019050818103600083015261298a816123fd565b9050919050565b600060208201905081810360008301526129aa81612463565b9050919050565b600060208201905081810360008301526129ca816124a3565b9050919050565b600060208201905081810360008301526129ea816124e3565b9050919050565b60006020820190508181036000830152612a0a81612549565b9050919050565b60006020820190508181036000830152612a2a81612589565b9050919050565b60006020820190508181036000830152612a4a816125ef565b9050919050565b60006020820190508181036000830152612a6a8161262f565b9050919050565b60006020820190508181036000830152612a8a8161272f565b9050919050565b60006020820190508181036000830152612aaa81612795565b9050919050565b6000602082019050612ac660008301846127d5565b92915050565b6000604082019050612ae160008301856127d5565b612aee60208301846122c8565b9392505050565b6000604082019050612b0a60008301856127d5565b612b1760208301846127d5565b9392505050565b6000606082019050612b3360008301866127d5565b612b4060208301856127d5565b612b4d60408301846127d5565b949350505050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b8d82612c66565b9150612b9883612c66565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bcd57612bcc612c91565b5b828201905092915050565b6000612be382612c66565b9150612bee83612c66565b925082821015612c0157612c00612c91565b5b828203905092915050565b6000612c1782612c46565b9050919050565b60008115159050919050565b6000819050919050565b6000612c3f82612c0c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c7b82612c66565b9050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b612cda81612c0c565b8114612ce557600080fd5b50565b612cf181612c1e565b8114612cfc57600080fd5b50565b612d0881612c2a565b8114612d1357600080fd5b50565b612d1f81612c34565b8114612d2a57600080fd5b50565b612d3681612c66565b8114612d4157600080fd5b5056fea264697066735822122086e1cb2d75c6396cbf3f2d60210e10ea479525e8ba786e219abeca3dff733d4a64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Initiate a flash loan.",
        "params": {
          "amount": "The amount of tokens lent.",
          "data": "Arbitrary data structure, intended to contain user-defined parameters.",
          "receiver": "The receiver of the tokens in the loan, and the receiver of the callback.",
          "token": "The loan currency."
        }
      },
      "maxFlashLoan(address)": {
        "details": "The amount of currency available to be lent.",
        "params": {
          "token": "The loan currency."
        },
        "returns": {
          "_0": "The amount of `token` that can be borrowed."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "staker_reth_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_storage_address",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}