{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FallbackHit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_received",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveHit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "buyerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "depositDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_last_deposit_block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deposit_delay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "registered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketPoolRETHCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_eth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakedRETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x93d517b29091799bc2ab8678bf8cc3e7575d7ef845b43c52e0e2a498a1c567b3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2997949",
    "logsBloom": "0x
    "blockHash": "0xb03ba49b3892cf7bd2b7c073ea8d1b731ee0e42edfcec685272a671e6d47f2ed",
    "transactionHash": "0x93d517b29091799bc2ab8678bf8cc3e7575d7ef845b43c52e0e2a498a1c567b3",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2997949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "29318a8f9bd84f22823c4d814b8c405f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FallbackHit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_received\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveHit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"buyerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"depositDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_last_deposit_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposit_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketPoolRETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedRETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketStake.sol\":\"RocketStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\nimport './libraries/Counters.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRocketStake.sol';\\nimport './interfaces/IRocketStorage.sol';\\nimport './interfaces/IMigrationCompatible.sol';\\nimport './interfaces/IRocketDepositPool.sol';\\nimport './interfaces/IRocketTokenRETH.sol';\\n\\ncontract RETHBuyer {\\n    using SafeMath for uint256;\\n    \\n    address rocket_storage_address;\\n    address payable owner;\\n\\n    event FallbackHit(address sender, uint256 value);\\n    event ReceiveHit(address sender, uint256 value);\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n        owner = msg.sender;\\n    }\\n\\n    fallback() external payable {\\n        emit FallbackHit(msg.sender, msg.value);\\n    }\\n    receive() external payable {\\n        emit ReceiveHit(msg.sender, msg.value);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only RocketStake can do that\\\");\\n        _;\\n    }\\n\\n    function burn(uint256 reth_amount) external onlyOwner returns(uint256 _eth_received) {\\n        require(reth_amount > 0, \\\"You must burn a non zero positive amount of reth\\\");\\n\\n        // setup RP\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n\\n        // burn the reth specified and record this contract's balance change\\n        uint256 starting_balance = address(this).balance;\\n        rocket_token_reth.burn(reth_amount);\\n        uint256 eth_received = address(this).balance.sub(starting_balance);\\n\\n        // send the owner of this contract the eth received from rocket pool and return\\n        owner.transfer(eth_received);\\n        return eth_received;\\n    } \\n\\n    function deposit() payable external onlyOwner returns(uint256 _reth_added_to_stake) {\\n        require(msg.value > 0, \\\"Must deposit a non-zero amount of ETH\\\");\\n\\n        // setup RP\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketDepositPool\\\"))));\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n\\n        // deposit msg.value into rocket pool and record the change in our rETH balance as a result\\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\\n        rocket_deposit_pool.deposit{ value: msg.value }();\\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\\n\\n        // return the change in total rETH held by this contract\\n        return reth_supply_after.sub(reth_supply_before);\\n    }\\n\\n    function lastDepositBlock() external view returns(uint256 _last_deposit_block) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        return rocket_storage.getUint(keccak256(abi.encodePacked(\\\"user.deposit.block\\\", address(this))));\\n    }\\n}\\n\\ncontract RocketStake is IRocketStake {\\n    using SafeMath for uint256;\\n\\n    event FallbackHit(address sender, uint256 value);\\n    event ReceiveHit(address sender, uint256 value);\\n\\n    struct Staker {\\n        RETHBuyer reth_buyer;\\n        uint256 staked_reth;\\n        bool exists;\\n    }\\n\\n    uint256 total_reth_held;\\n    mapping(address => Staker) internal stakers;\\n    address rocket_storage_address;\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n    }\\n\\n    fallback() external payable {\\n        emit FallbackHit(msg.sender, msg.value);\\n    }\\n    receive() external payable {\\n        emit ReceiveHit(msg.sender, msg.value);\\n    }\\n\\n    modifier safeWithdrawal(uint256 eth_amount, address staker) {\\n        require(eth_amount > 0, \\\"You must withdraw more than 0 ETH\\\");\\n        require(stakers[staker].exists == true, \\\"Staker not registered yet.\\\");\\n        require(stakers[staker].staked_reth > 0, \\\"Nothing staked here.\\\");\\n\\n        // ensures that the staker has waited long enough to withdraw from rocket pool\\n        // rocket pool has a cooldown period after minting rETH \\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        require(\\n            block.timestamp.sub(stakers[staker].reth_buyer.lastDepositBlock())\\n                > rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\"))), \\n            \\\"Rocket Pool will not let you move or withdraw your rETH yet.\\\"\\n        );\\n        _;\\n    } \\n\\n    function register() external override {\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n\\n            emit Register(msg.sender);\\n        }\\n    }\\n\\n    function stake() external payable override {\\n        require(msg.value > 0, \\\"You must send a non-zero amount of eth to stake.\\\");\\n        \\n        // register and create reth_buyer if doesn't exist already\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n\\n            emit Register(msg.sender);\\n        }\\n\\n        // have the reth_buyer deposit eth for rETH and hold on to it\\n        // this value will never equal zero because Rocket Pool reverts when depositing an amount below their set minimum\\n        // note: ui should prevent reverting due to lower than minimum deposit error\\n        uint256 reth_added_to_stake = stakers[msg.sender].reth_buyer.deposit{ value: msg.value }();\\n\\n        // update balances\\n        total_reth_held = total_reth_held.add(reth_added_to_stake);\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\\n\\n        emit Stake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function withdraw(uint256 eth_amount) external override safeWithdrawal(eth_amount, msg.sender) {\\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\\n\\n        // send the received eth to the staker\\n        msg.sender.transfer(eth_received);\\n\\n        emit Withdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function migrate(\\n        address next_contract_address,\\n        uint256 eth_amount\\n    ) override external safeWithdrawal(eth_amount, msg.sender) {\\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\\n\\n        // send the user's funds to a contract of their choosing\\n        IMigrationCompatible(next_contract_address).startTransfer(eth_received, msg.sender);\\n        payable(next_contract_address).transfer(eth_received);\\n        IMigrationCompatible(next_contract_address).closeTransfer(eth_received, msg.sender);\\n\\n        emit Migrate(msg.sender, next_contract_address, eth_received);\\n    }\\n\\n    function depositDelay(address staker) override external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    ) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\")));\\n        return(\\n            stakers[staker].exists == true \\n                ? stakers[staker].reth_buyer.lastDepositBlock()\\n                : 0,\\n            block.number,\\n            deposit_delay\\n        );\\n    }\\n    \\n    function stakedETH(address staker) override external view returns(uint256 staked_eth) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(stakers[staker].staked_reth);\\n    }\\n\\n    function stakedRETH(address staker) override external view returns(uint256 staked_reth) {\\n        return stakers[staker].staked_reth;\\n    }\\n\\n    function registered(address staker) override external view returns(bool exists) {\\n        return stakers[staker].exists;\\n    }\\n\\n    function buyerAddress(address staker) override external view returns(address) {\\n        return stakers[staker].exists == true ? address(stakers[staker].reth_buyer) : address(0);\\n    }\\n\\n    function rocketPoolRETHCollateral() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getTotalCollateral();\\n    }\\n\\n    function totalRETHHeld() external override view returns(uint256 collateral) {\\n        return total_reth_held;\\n    }\\n\\n    function totalETHHeld() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(total_reth_held);\\n    }\\n\\n    function _burnAndReturnETH(uint256 eth_amount, address staker) internal returns(uint256 _eth_received) {\\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        \\n        // make sure the staker is not trying to withdraw more ETH than their staked rETH is worth\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[staker].staked_reth);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot withdraw more ETH than you have staked.\\\");\\n\\n        // determine how much rETH the supplied eth_amount translates to\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n\\n        // tell the buyer contract to burn some of its rETH and send the resulting ETH proceeds back to this contract\\n        uint256 eth_received = stakers[staker].reth_buyer.burn(reth_to_burn);\\n\\n        // add a check in the odd case where no ETH is return by the reth_buyers burn function\\n        require(eth_received > 0, \\\"No ETH was received from the rETH burn\\\");\\n\\n        // update balances\\n        total_reth_held = total_reth_held.sub(reth_to_burn);\\n        stakers[staker].staked_reth = stakers[staker].staked_reth.sub(reth_to_burn);\\n\\n        return eth_received;\\n    }\\n}\",\"keccak256\":\"0xd9b704a9f60a1240c5c16a55d5f89ba917d157ec08a79adf81eca5b15f599adc\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x0ccdbea9b8d000ef8481759fe1852567ce6fc7dbc1a274ad63814ffb96b12e06\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IMigrationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\ninterface IMigrationCompatible {\\n    function startTransfer(uint256 reth_amount, address staker) external; \\n    function closeTransfer(uint256 reth_amount, address staker) external;\\n}\",\"keccak256\":\"0xa1a8aa4445e2e0e47892ecce4b7e0d0f1baea31cc0d86f49d95cb7e909c8444a\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketDepositPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\ninterface IRocketDepositPool {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xa0413452d502fb88f2871185b7aee73004b02359933ee29c2cf881d14939d9d4\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\ninterface IRocketStake {\\n    // primary functions\\n    function stake() external payable; \\n    function withdraw(uint256 eth_amount) external;\\n    function register() external;\\n    function migrate(address next_contract_address, uint256 eth_amount) external;\\n\\n    // view functions\\n    function depositDelay(address staker) external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    );\\n    function stakedETH(address staker) external view returns(uint256 eth_amount);\\n    function stakedRETH(address staker) external view returns(uint256 staked_reth);\\n    function registered(address staker) external view returns(bool exists);\\n    function buyerAddress(address staker) external view returns(address);\\n    function rocketPoolRETHCollateral() external view returns(uint256);\\n    function totalRETHHeld() external view returns(uint256);\\n    function totalETHHeld() external view returns(uint256);\\n\\n    // events\\n    event Register(address indexed staker_address);\\n    event Stake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\\n    event Withdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\\n    event Migrate(address indexed staker_address, address next_contract_address, uint256 eth_received);\\n}\",\"keccak256\":\"0x751959b3b7c9bc9b9edd57333bdcda9cfd9334381dabeecb15154eb7bb9a1b29\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\ninterface IRocketStorage {\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getAddress(bytes32 _key) external view returns (address);\\n}\",\"keccak256\":\"0x3fe96786035e88f8ad13eae25559cbc11433c010bef1db7d0ec40b79af5fe732\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketTokenRETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n    function distributeRewards() payable external;\\n    function getTotalCollateral() external view returns (uint256);\\n    function burn(uint256 _rethAmount) external returns (uint256);\\n}\",\"keccak256\":\"0xaa2e7abc17b4fc0dc61271d7ed575516b073f6297ff663d1f49234d827e72f9f\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0xe675ddad30e83de5faa41447058f1d155d22e3c93db7e3047c6a69eaa37d5ecf\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x28d5e07ebb92f3ccee2376db754711cdfc104033c79bac129c2d15153bdf4ef0\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516135983803806135988339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050613503806100956000396000f3fe6080604052600436106100ab5760003560e01c8063896254941161006457806389625494146102af578063ad68ebf71461032a578063b2dd5c0714610385578063c0f90f52146103ec578063d677491a1461045f578063dff173571461048a57610107565b806318526a3c1461015e5780631aa3a008146101c35780632accfc04146101da5780632e1a7d4d146102055780633a4b66f11461024057806372b8d4701461024a57610107565b36610107577f5e66db84f7bc0fb3aa7df0328ed5ed0e25fc5b9429191cebfe9ccd07c6ef53993334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b7f5d55a1f2a158747e1dae15f7fe657fe36856753b8b5b7a4f96237efdaf3103663334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b34801561016a57600080fd5b506101ad6004803603602081101561018157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b5565b6040518082815260200191505060405180910390f35b3480156101cf57600080fd5b506101d8610501565b005b3480156101e657600080fd5b506101ef6106e8565b6040518082815260200191505060405180910390f35b34801561021157600080fd5b5061023e6004803603602081101561022857600080fd5b81019080803590602001909291905050506108a3565b005b610248610ddf565b005b34801561025657600080fd5b506102996004803603602081101561026d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611260565b6040518082815260200191505060405180910390f35b3480156102bb57600080fd5b506102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033657600080fd5b506103836004803603604081101561034d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061152c565b005b34801561039157600080fd5b506103d4600480360360208110156103a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b4f565b60405180821515815260200191505060405180910390f35b3480156103f857600080fd5b5061043b6004803603602081101561040f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ba8565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561046b57600080fd5b50610474611e28565b6040518082815260200191505060405180910390f35b34801561049657600080fd5b5061049f611fd6565b6040518082815260200191505060405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146106e65760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105e590612663565b808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610621573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d60208110156107fb57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d602081101561088b57600080fd5b81019080805190602001909291905050509250505090565b8033600082116108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134ad6021913960400191505060405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146109c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5374616b6572206e6f742072656769737465726564207965742e00000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411610a7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7468696e67207374616b656420686572652e00000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d6020811015610b8f57600080fd5b8101908080519060200190929190505050610c95600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4b57600080fd5b505afa158015610c5f573d6000803e3d6000fd5b505050506040513d6020811015610c7557600080fd5b810190808051906020019092919050505042611fdf90919063ffffffff16565b11610ceb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061343f603c913960400191505060405180910390fd5b6000610cf78533612029565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d3f573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808381526020018281526020019250505060405180910390a25050505050565b60003411610e38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806133e96030913960400191505060405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151461101d5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610f1c90612663565b808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610f58573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b50505050506040513d60208110156110f457600080fd5b8101908080519060200190929190505050905061111c8160005461251b90919063ffffffff16565b60008190555061117781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461251b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4468234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405180848152602001838152602001828152602001935050505060405180910390a250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d602081101561137357600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d602081101561144357600080fd5b810190808051906020019092919050505092505050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146114c1576000611525565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b803360008211611587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134ad6021913960400191505060405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5374616b6572206e6f742072656769737465726564207965742e00000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7468696e67207374616b656420686572652e00000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156117ee57600080fd5b505afa158015611802573d6000803e3d6000fd5b505050506040513d602081101561181857600080fd5b810190808051906020019092919050505061191e600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d457600080fd5b505afa1580156118e8573d6000803e3d6000fd5b505050506040513d60208110156118fe57600080fd5b810190808051906020019092919050505042611fdf90919063ffffffff16565b11611974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061343f603c913960400191505060405180910390fd5b60006119808533612029565b90508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156119f357600080fd5b505af1158015611a07573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a51573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611ac357600080fd5b505af1158015611ad7573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a8783604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c9457600080fd5b505afa158015611ca8573d6000803e3d6000fd5b505050506040513d6020811015611cbe57600080fd5b8101908080519060200190929190505050905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611d33576000611e17565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015611ddb57600080fd5b505afa158015611def573d6000803e3d6000fd5b505050506040513d6020811015611e0557600080fd5b81019080805190602001909291905050505b438294509450945050509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611f1157600080fd5b505afa158015611f25573d6000803e3d6000fd5b505050506040513d6020811015611f3b57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b81019080805190602001909291905050509250505090565b60008054905090565b600061202183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506125a3565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561211257600080fd5b505afa158015612126573d6000803e3d6000fd5b505050506040513d602081101561213c57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d602081101561220e57600080fd5b810190808051906020019092919050505090508086111561227a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061347b6032913960400191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d60208110156122f757600080fd5b810190808051906020019092919050505090506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156123c157600080fd5b505af11580156123d5573d6000803e3d6000fd5b505050506040513d60208110156123eb57600080fd5b8101908080519060200190929190505050905060008111612457576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134196026913960400191505060405180910390fd5b61246c82600054611fdf90919063ffffffff16565b6000819055506124c782600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611fdf90919063ffffffff16565b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550809550505050505092915050565b600080828401905083811015612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000838311158290612650576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126155780820151818401526020810190506125fa565b50505050905090810190601f1680156126425780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b610d78806126718339019056fe608060405234801561001057600080fd5b50604051610d78380380610d788339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610ca3806100d56000396000f3fe6080604052600436106100385760003560e01c80632a3d7c81146100eb57806342966c6814610116578063d0e30db01461016557610094565b36610094577f5e66db84f7bc0fb3aa7df0328ed5ed0e25fc5b9429191cebfe9ccd07c6ef53993334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b7f5d55a1f2a158747e1dae15f7fe657fe36856753b8b5b7a4f96237efdaf3103663334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b3480156100f757600080fd5b50610100610183565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061014f6004803603602081101561013957600080fd5b81019080803590602001909291905050506102a2565b6040518082815260200191505060405180910390f35b61016d610604565b6040518082815260200191505060405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f53060405160200180807f757365722e6465706f7369742e626c6f636b00000000000000000000000000008152506012018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d602081101561028b57600080fd5b810190808051906020019092919050505091505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920526f636b65745374616b652063616e20646f20746861740000000081525060200191505060405180910390fd5b600082116103c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610c3e6030913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d60208110156104d157600080fd5b8101908080519060200190929190505050905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561053c57600080fd5b505af1158015610550573d6000803e3d6000fd5b505050506040513d602081101561056657600080fd5b810190808051906020019092919050505050600061058d8247610b0e90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105f7573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920526f636b65745374616b652063616e20646f20746861740000000081525060200191505060405180910390fd5b60003411610722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610c196025913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b65744465706f736974506f6f6c0000000000000000000000000000008152506011019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d602081101561083357600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d60208110156109d757600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b81019080805190602001909291905050509050610b048282610b0e90919063ffffffff16565b9550505050505090565b6000610b5083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b58565b905092915050565b6000838311158290610c05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bca578082015181840152602081019050610baf565b50505050905090810190601f168015610bf75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe4d757374206465706f7369742061206e6f6e2d7a65726f20616d6f756e74206f6620455448596f75206d757374206275726e2061206e6f6e207a65726f20706f73697469766520616d6f756e74206f662072657468a2646970667358221220a25c3d7c6e768f22cd050c3c5921c57582c59cc7d4dfd26adbf43851928d80f764736f6c63430007060033596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e74206f662065746820746f207374616b652e4e6f20455448207761732072656365697665642066726f6d207468652072455448206275726e526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7665206f7220776974686472617720796f75722072455448207965742e596f752063616e6e6f74207769746864726177206d6f726520455448207468616e20796f752068617665207374616b65642e596f75206d757374207769746864726177206d6f7265207468616e203020455448a26469706673582212200481a21272b105c01863917bcd420dec98c2c76f815ab00f27069f5b743924d364736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063896254941161006457806389625494146102af578063ad68ebf71461032a578063b2dd5c0714610385578063c0f90f52146103ec578063d677491a1461045f578063dff173571461048a57610107565b806318526a3c1461015e5780631aa3a008146101c35780632accfc04146101da5780632e1a7d4d146102055780633a4b66f11461024057806372b8d4701461024a57610107565b36610107577f5e66db84f7bc0fb3aa7df0328ed5ed0e25fc5b9429191cebfe9ccd07c6ef53993334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b7f5d55a1f2a158747e1dae15f7fe657fe36856753b8b5b7a4f96237efdaf3103663334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b34801561016a57600080fd5b506101ad6004803603602081101561018157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b5565b6040518082815260200191505060405180910390f35b3480156101cf57600080fd5b506101d8610501565b005b3480156101e657600080fd5b506101ef6106e8565b6040518082815260200191505060405180910390f35b34801561021157600080fd5b5061023e6004803603602081101561022857600080fd5b81019080803590602001909291905050506108a3565b005b610248610ddf565b005b34801561025657600080fd5b506102996004803603602081101561026d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611260565b6040518082815260200191505060405180910390f35b3480156102bb57600080fd5b506102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033657600080fd5b506103836004803603604081101561034d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061152c565b005b34801561039157600080fd5b506103d4600480360360208110156103a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b4f565b60405180821515815260200191505060405180910390f35b3480156103f857600080fd5b5061043b6004803603602081101561040f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ba8565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561046b57600080fd5b50610474611e28565b6040518082815260200191505060405180910390f35b34801561049657600080fd5b5061049f611fd6565b6040518082815260200191505060405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146106e65760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105e590612663565b808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610621573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d60208110156107fb57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d602081101561088b57600080fd5b81019080805190602001909291905050509250505090565b8033600082116108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134ad6021913960400191505060405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146109c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5374616b6572206e6f742072656769737465726564207965742e00000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411610a7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7468696e67207374616b656420686572652e00000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d6020811015610b8f57600080fd5b8101908080519060200190929190505050610c95600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4b57600080fd5b505afa158015610c5f573d6000803e3d6000fd5b505050506040513d6020811015610c7557600080fd5b810190808051906020019092919050505042611fdf90919063ffffffff16565b11610ceb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061343f603c913960400191505060405180910390fd5b6000610cf78533612029565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d3f573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808381526020018281526020019250505060405180910390a25050505050565b60003411610e38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806133e96030913960400191505060405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151461101d5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610f1c90612663565b808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610f58573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b50505050506040513d60208110156110f457600080fd5b8101908080519060200190929190505050905061111c8160005461251b90919063ffffffff16565b60008190555061117781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461251b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4468234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405180848152602001838152602001828152602001935050505060405180910390a250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d602081101561137357600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d602081101561144357600080fd5b810190808051906020019092919050505092505050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146114c1576000611525565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b803360008211611587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134ad6021913960400191505060405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5374616b6572206e6f742072656769737465726564207965742e00000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7468696e67207374616b656420686572652e00000000000000000000000081525060200191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156117ee57600080fd5b505afa158015611802573d6000803e3d6000fd5b505050506040513d602081101561181857600080fd5b810190808051906020019092919050505061191e600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d457600080fd5b505afa1580156118e8573d6000803e3d6000fd5b505050506040513d60208110156118fe57600080fd5b810190808051906020019092919050505042611fdf90919063ffffffff16565b11611974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061343f603c913960400191505060405180910390fd5b60006119808533612029565b90508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156119f357600080fd5b505af1158015611a07573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a51573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611ac357600080fd5b505af1158015611ad7573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a8783604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200180828152602001807f6e6574776f726b2e726574682e6465706f7369742e64656c6179000000000000815250601a01915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c9457600080fd5b505afa158015611ca8573d6000803e3d6000fd5b505050506040513d6020811015611cbe57600080fd5b8101908080519060200190929190505050905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611d33576000611e17565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015611ddb57600080fd5b505afa158015611def573d6000803e3d6000fd5b505050506040513d6020811015611e0557600080fd5b81019080805190602001909291905050505b438294509450945050509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611f1157600080fd5b505afa158015611f25573d6000803e3d6000fd5b505050506040513d6020811015611f3b57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b81019080805190602001909291905050509250505090565b60008054905090565b600061202183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506125a3565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561211257600080fd5b505afa158015612126573d6000803e3d6000fd5b505050506040513d602081101561213c57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d602081101561220e57600080fd5b810190808051906020019092919050505090508086111561227a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061347b6032913960400191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d60208110156122f757600080fd5b810190808051906020019092919050505090506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156123c157600080fd5b505af11580156123d5573d6000803e3d6000fd5b505050506040513d60208110156123eb57600080fd5b8101908080519060200190929190505050905060008111612457576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134196026913960400191505060405180910390fd5b61246c82600054611fdf90919063ffffffff16565b6000819055506124c782600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611fdf90919063ffffffff16565b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550809550505050505092915050565b600080828401905083811015612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000838311158290612650576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126155780820151818401526020810190506125fa565b50505050905090810190601f1680156126425780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b610d78806126718339019056fe608060405234801561001057600080fd5b50604051610d78380380610d788339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610ca3806100d56000396000f3fe6080604052600436106100385760003560e01c80632a3d7c81146100eb57806342966c6814610116578063d0e30db01461016557610094565b36610094577f5e66db84f7bc0fb3aa7df0328ed5ed0e25fc5b9429191cebfe9ccd07c6ef53993334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b7f5d55a1f2a158747e1dae15f7fe657fe36856753b8b5b7a4f96237efdaf3103663334604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b3480156100f757600080fd5b50610100610183565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061014f6004803603602081101561013957600080fd5b81019080803590602001909291905050506102a2565b6040518082815260200191505060405180910390f35b61016d610604565b6040518082815260200191505060405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f53060405160200180807f757365722e6465706f7369742e626c6f636b00000000000000000000000000008152506012018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d602081101561028b57600080fd5b810190808051906020019092919050505091505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920526f636b65745374616b652063616e20646f20746861740000000081525060200191505060405180910390fd5b600082116103c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610c3e6030913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d60208110156104d157600080fd5b8101908080519060200190929190505050905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561053c57600080fd5b505af1158015610550573d6000803e3d6000fd5b505050506040513d602081101561056657600080fd5b810190808051906020019092919050505050600061058d8247610b0e90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105f7573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f6e6c7920526f636b65745374616b652063616e20646f20746861740000000081525060200191505060405180910390fd5b60003411610722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610c196025913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b65744465706f736974506f6f6c0000000000000000000000000000008152506011019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d602081101561083357600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200180807f636f6e74726163742e6164647265737300000000000000000000000000000000815250601001807f726f636b6574546f6b656e524554480000000000000000000000000000000000815250600f019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d60208110156109d757600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b81019080805190602001909291905050509050610b048282610b0e90919063ffffffff16565b9550505050505090565b6000610b5083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b58565b905092915050565b6000838311158290610c05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bca578082015181840152602081019050610baf565b50505050905090810190601f168015610bf75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe4d757374206465706f7369742061206e6f6e2d7a65726f20616d6f756e74206f6620455448596f75206d757374206275726e2061206e6f6e207a65726f20706f73697469766520616d6f756e74206f662072657468a2646970667358221220a25c3d7c6e768f22cd050c3c5921c57582c59cc7d4dfd26adbf43851928d80f764736f6c63430007060033596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e74206f662065746820746f207374616b652e4e6f20455448207761732072656365697665642066726f6d207468652072455448206275726e526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7665206f7220776974686472617720796f75722072455448207965742e596f752063616e6e6f74207769746864726177206d6f726520455448207468616e20796f752068617665207374616b65642e596f75206d757374207769746864726177206d6f7265207468616e203020455448a26469706673582212200481a21272b105c01863917bcd420dec98c2c76f815ab00f27069f5b743924d364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1086,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "total_reth_held",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1090,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "stakers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Staker)1084_storage)"
      },
      {
        "astId": 1092,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_storage_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RETHBuyer)1060": {
        "encoding": "inplace",
        "label": "contract RETHBuyer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)1084_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RocketStake.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1084_storage"
      },
      "t_struct(Staker)1084_storage": {
        "encoding": "inplace",
        "label": "struct RocketStake.Staker",
        "members": [
          {
            "astId": 1079,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "reth_buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(RETHBuyer)1060"
          },
          {
            "astId": 1081,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "staked_reth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1083,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}