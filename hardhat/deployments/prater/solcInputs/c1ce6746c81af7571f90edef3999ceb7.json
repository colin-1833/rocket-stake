{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/RocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\nimport './libraries/Counters.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IRocketStake.sol';\nimport './interfaces/IRocketStorage.sol';\nimport './interfaces/IMigrationCompatible.sol';\nimport './interfaces/IRocketDepositPool.sol';\nimport './interfaces/IRocketTokenRETH.sol';\n\ncontract RETHBuyer {\n    using SafeMath for uint256;\n    \n    address rocket_storage_address;\n    address payable owner;\n\n    event Fallback(address sender, uint256 value);\n    event Receive(address sender, uint256 value);\n\n    constructor(address _rocket_storage_address) {\n        rocket_storage_address = _rocket_storage_address;\n        owner = msg.sender;\n    }\n\n    fallback() external payable {\n        emit Fallback(msg.sender, msg.value);\n    }\n\n    receive() external payable {\n        emit Receive(msg.sender, msg.value);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only RocketStake can do that\");\n        _;\n    }\n\n    function burn(uint256 reth_amount) external onlyOwner returns(uint256 _eth_received) {\n        require(reth_amount > 0, \"You must burn a non zero positive amount of reth\");\n\n        // setup RP\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n\n        // burn the reth specified and record this contract's balance change\n        uint256 starting_balance = address(this).balance;\n        rocket_token_reth.burn(reth_amount);\n        uint256 eth_received = address(this).balance.sub(starting_balance);\n\n        // send the owner of this contract the eth received from rocket pool and return\n        owner.transfer(eth_received);\n        return eth_received;\n    } \n\n    function deposit() payable external onlyOwner returns(uint256 _reth_added_to_stake) {\n        require(msg.value > 0, \"Must deposit a non-zero amount of ETH\");\n\n        // setup RP\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketDepositPool\"))));\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n\n        // deposit msg.value into rocket pool and record the change in our rETH balance as a result\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\n        rocket_deposit_pool.deposit{ value: msg.value }();\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\n\n        // return the change in total rETH held by this contract\n        return reth_supply_after.sub(reth_supply_before);\n    }\n\n    function lastDepositBlock() external view returns(uint256 _last_deposit_block) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        return rocket_storage.getUint(keccak256(abi.encodePacked(\"user.deposit.block\", address(this))));\n    }\n}\n\ncontract RocketStake is IRocketStake {\n    using SafeMath for uint256;\n\n    event Fallback(address sender, uint256 value);\n    event Receive(address sender, uint256 value);\n\n    struct Staker {\n        RETHBuyer reth_buyer;\n        uint256 staked_reth;\n        bool exists;\n    }\n\n    uint256 total_reth_held;\n    mapping(address => Staker) internal stakers;\n    address rocket_storage_address;\n\n    constructor(address _rocket_storage_address) {\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    fallback() external payable {\n        emit Fallback(msg.sender, msg.value);\n    }\n    \n    receive() external payable {\n        emit Receive(msg.sender, msg.value);\n    }\n\n    modifier safeWithdrawal(uint256 eth_amount, address staker) {\n        require(eth_amount > 0, \"You must withdraw more than 0 ETH\");\n        require(stakers[staker].exists == true, \"Staker not registered yet.\");\n        require(stakers[staker].staked_reth > 0, \"Nothing staked here.\");\n\n        // ensures that the staker has waited long enough to withdraw from rocket pool\n        // rocket pool has a cooldown period after minting rETH \n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        require(\n            block.timestamp.sub(stakers[staker].reth_buyer.lastDepositBlock())\n                > rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\"dao.protocol.setting.network\"), \"network.reth.deposit.delay\"))), \n            \"Rocket Pool will not let you move or withdraw your rETH yet.\"\n        );\n        _;\n    } \n\n    function register() external override {\n        if (stakers[msg.sender].exists != true) {\n            stakers[msg.sender].exists = true;\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\n\n            emit Register(msg.sender);\n        }\n    }\n\n    function stake() external payable override {\n        require(msg.value > 0, \"You must send a non-zero amount of eth to stake.\");\n        \n        // register and create reth_buyer if doesn't exist already\n        if (stakers[msg.sender].exists != true) {\n            stakers[msg.sender].exists = true;\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\n\n            emit Register(msg.sender);\n        }\n\n        // have the reth_buyer deposit eth for rETH and hold on to it\n        // this value will never equal zero because Rocket Pool reverts when depositing an amount below their set minimum\n        // note: ui should prevent reverting due to lower than minimum deposit error\n        uint256 reth_added_to_stake = stakers[msg.sender].reth_buyer.deposit{ value: msg.value }();\n\n        // update balances\n        total_reth_held = total_reth_held.add(reth_added_to_stake);\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\n\n        emit Stake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\n    }\n\n    function withdraw(uint256 eth_amount) external override safeWithdrawal(eth_amount, msg.sender) {\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\n\n        // send the received eth to the staker\n        msg.sender.transfer(eth_received);\n\n        emit Withdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\n    }\n\n    function migrate(\n        address next_contract_address,\n        uint256 eth_amount\n    ) override external safeWithdrawal(eth_amount, msg.sender) {\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\n\n        // send the user's funds to a contract of their choosing\n        IMigrationCompatible(next_contract_address).startTransfer(eth_received, msg.sender);\n        payable(next_contract_address).transfer(eth_received);\n        IMigrationCompatible(next_contract_address).closeTransfer(eth_received, msg.sender);\n\n        emit Migrate(msg.sender, next_contract_address, eth_received);\n    }\n\n    function depositDelay(address staker) override external view returns(\n        uint256 _last_deposit_block,\n        uint256 _block_number,\n        uint256 _deposit_delay\n    ) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\"dao.protocol.setting.network\"), \"network.reth.deposit.delay\")));\n        return(\n            stakers[staker].exists == true \n                ? stakers[staker].reth_buyer.lastDepositBlock()\n                : 0,\n            block.number,\n            deposit_delay\n        );\n    }\n    \n    function stakedETH(address staker) override external view returns(uint256 staked_eth) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(stakers[staker].staked_reth);\n    }\n\n    function stakedRETH(address staker) override external view returns(uint256 staked_reth) {\n        return stakers[staker].staked_reth;\n    }\n\n    function registered(address staker) override external view returns(bool exists) {\n        return stakers[staker].exists;\n    }\n\n    function buyerAddress(address staker) override external view returns(address) {\n        return stakers[staker].exists == true ? address(stakers[staker].reth_buyer) : address(0);\n    }\n\n    function rocketPoolRETHCollateral() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getTotalCollateral();\n    }\n\n    function totalRETHHeld() external override view returns(uint256 collateral) {\n        return total_reth_held;\n    }\n\n    function totalETHHeld() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(total_reth_held);\n    }\n\n    function _burnAndReturnETH(uint256 eth_amount, address staker) internal returns(uint256 _eth_received) {\n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        \n        // make sure the staker is not trying to withdraw more ETH than their staked rETH is worth\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[staker].staked_reth);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot withdraw more ETH than you have staked.\");\n\n        // determine how much rETH the supplied eth_amount translates to\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\n\n        // tell the buyer contract to burn some of its rETH and send the resulting ETH proceeds back to this contract\n        uint256 eth_received = stakers[staker].reth_buyer.burn(reth_to_burn);\n\n        // add a check in the odd case where no ETH is return by the reth_buyers burn function\n        require(eth_received > 0, \"No ETH was received from the rETH burn\");\n\n        // update balances\n        total_reth_held = total_reth_held.sub(reth_to_burn);\n        stakers[staker].staked_reth = stakers[staker].staked_reth.sub(reth_to_burn);\n\n        return eth_received;\n    }\n}"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\nimport \"./SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IRocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface IRocketStake {\n    // primary functions\n    function stake() external payable; \n    function withdraw(uint256 eth_amount) external;\n    function register() external;\n    function migrate(address next_contract_address, uint256 eth_amount) external;\n\n    // view functions\n    function depositDelay(address staker) external view returns(\n        uint256 _last_deposit_block,\n        uint256 _block_number,\n        uint256 _deposit_delay\n    );\n    function stakedETH(address staker) external view returns(uint256 eth_amount);\n    function stakedRETH(address staker) external view returns(uint256 staked_reth);\n    function registered(address staker) external view returns(bool exists);\n    function buyerAddress(address staker) external view returns(address);\n    function rocketPoolRETHCollateral() external view returns(uint256);\n    function totalRETHHeld() external view returns(uint256);\n    function totalETHHeld() external view returns(uint256);\n\n    // events\n    event Register(address indexed staker_address);\n    event Stake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\n    event Withdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\n    event Migrate(address indexed staker_address, address next_contract_address, uint256 eth_received);\n}"
    },
    "contracts/interfaces/IRocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface IRocketStorage {\n    function getUint(bytes32 _key) external view returns (uint);\n    function getAddress(bytes32 _key) external view returns (address);\n}"
    },
    "contracts/interfaces/IMigrationCompatible.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface IMigrationCompatible {\n    function startTransfer(uint256 reth_amount, address staker) external; \n    function closeTransfer(uint256 reth_amount, address staker) external;\n}"
    },
    "contracts/interfaces/IRocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface IRocketDepositPool {\n    function deposit() external payable;\n}"
    },
    "contracts/interfaces/IRocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\nimport '../interfaces/IERC20.sol';\n\ninterface IRocketTokenRETH is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function getTotalCollateral() external view returns (uint256);\n    function burn(uint256 _rethAmount) external returns (uint256);\n}"
    },
    "contracts/stubs/RocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface RocketTokenRETHInterface {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function burn(uint256 _rethAmount) external;\n    function mint(address _to) payable external;\n}\n\ninterface RocketStorageInterface {\n    function getAddress(bytes32 _key) external view returns (address);\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint256 value) external;\n    function getUint(bytes32 _key) external returns(uint256 value);\n}\n\ninterface RocketDepositPoolInterface {\n    function deposit() payable external;\n}\n\ncontract RocketDepositPool is RocketDepositPoolInterface {\n    address rocket_token_reth_address;\n    address rocket_storage_address;\n\n    constructor(\n        address _rocket_token_reth_address, \n        address _rocket_storage_address\n    ) {\n        rocket_token_reth_address = _rocket_token_reth_address;\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    function deposit() payable override public {\n        RocketStorageInterface(rocket_storage_address).setUint(keccak256(abi.encodePacked(\"user.deposit.block\", msg.sender)), block.number);\n        RocketTokenRETHInterface(rocket_token_reth_address).mint{ value: msg.value }(msg.sender);\n    }\n}\n"
    },
    "contracts/stubs/RocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\ninterface RocketStorageInterface {\n    function getAddress(bytes32 _key) external view returns (address);\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint256 value) external;\n    function getUint(bytes32 _key) external returns(uint256 value);\n}\n\ncontract RocketStorage is RocketStorageInterface {\n    mapping(bytes32 => address)    private addresses;\n\n    constructor() {}\n\n    function getAddress(bytes32 _key) override public view returns (address) {\n        return addresses[_key];\n    }\n\n    function setAddress(bytes32 _key, address _value) override public {\n        addresses[_key] = _value;\n    }\n\n    function getUint(bytes32 _key) override external view returns (uint256 r) {\n        assembly {\n            r := sload (_key)\n        }\n    }\n\n    function setUint(bytes32 _key, uint _value) override external {\n        assembly {\n            sstore (_key, _value)\n        }\n    }\n}\n"
    },
    "contracts/stubs/RocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ninterface RocketTokenRETHInterface {\n    function getTotalCollateral() external view returns (uint256);\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() external payable;\n    function burn(uint256 _rethAmount) external returns (uint256);\n    function mint(address _to) external payable;\n}\n\ninterface RocketStorageInterface {\n    function getAddress(bytes32 _key) external view returns (address);\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint256 value) external;\n    function getUint(bytes32 _key) external returns(uint256 value);\n}\n\ncontract RocketTokenRETH is RocketTokenRETHInterface, ERC20 {\n    using SafeMath for uint256;\n\n    address owner;\n    address rocket_storage_address;\n    uint256 collateral = 100 ether;\n\n    constructor(address _rocket_storage_address) ERC20(\"RocketTokenRETH\", \"rETH\") {\n        owner = msg.sender;\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    function updateTotalCollateral(uint256 _collateral) public {\n        require(msg.sender == owner, \"You must be the owner to do that.\");\n        collateral = _collateral;\n    }\n\n    function getTotalCollateral() public view override returns (uint256) {\n        return collateral;\n    }\n\n    function getEthValue(uint256 _rethAmount) public view override returns (uint256) {\n        if (totalSupply() == 0) {\n            return 0;\n        }\n        return (address(this).balance.mul(_rethAmount)).div(totalSupply());\n    }\n\n    function getRethValue(uint256 _ethAmount) public view override returns (uint256) {\n        if (totalSupply() == 0) {\n            return _ethAmount;\n        }\n        return (totalSupply().mul(_ethAmount)).div(address(this).balance);\n    }\n\n    function distributeRewards() public payable override {}\n\n    function drain(uint256 amount) public {\n        require(msg.sender == owner, \"You must be the owner to do that.\");\n        payable(address(0)).transfer(amount);\n    }\n\n    function burn(uint256 _rethAmount) public override returns (uint256) {\n        require(_rethAmount > 0, \"Invalid token burn amount\");\n        require(\n            balanceOf(msg.sender) >= _rethAmount,\n            \"Insufficient rETH balance\"\n        );\n        uint256 blocks_passed = block.number.sub(\n            RocketStorageInterface(rocket_storage_address).getUint(keccak256(abi.encodePacked(\"user.deposit.block\", msg.sender)))\n        );\n        require(blocks_passed > 6, \"6 blocks must pass first\");\n        uint256 ethAmount = getEthValue(_rethAmount);\n        _burn(msg.sender, _rethAmount);\n        msg.sender.transfer(ethAmount);\n        return ethAmount;\n    }\n\n    function mint(address _to) public payable override {\n        uint256 rETHValue;\n        if (totalSupply() == 0) {\n            rETHValue = msg.value;\n        } else {\n            rETHValue = totalSupply().mul(msg.value).div(\n                address(this).balance.sub(msg.value)\n            );\n        }\n        _mint(_to, rETHValue);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}