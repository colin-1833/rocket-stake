{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/RocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport './libraries/Counters.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IRocketStake.sol';\nimport './interfaces/IRocketStorage.sol';\nimport './interfaces/IMigrationCompatible.sol';\nimport './interfaces/IRocketDepositPool.sol';\nimport './interfaces/IRocketTokenRETH.sol';\n\ncontract RETHBuyer {\n    using SafeMath for uint256;\n    \n    address rocket_storage_address;\n    address rocket_stake_address;\n\n    constructor(address _rocket_storage_address) {\n        rocket_storage_address = _rocket_storage_address;\n        rocket_stake_address = msg.sender;\n    }\n\n    function burn(uint256 reth_amount) external returns(uint256 _eth_received) {\n        require(msg.sender == rocket_stake_address, \"Only RocketStake can do that\");\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        uint256 starting_balance = address(this).balance;\n        rocket_token_reth.burn(reth_amount);\n        uint256 eth_received = address(this).balance.sub(starting_balance);\n        payable(rocket_stake_address).transfer(eth_received);\n        return eth_received;\n    } \n\n    function deposit() payable external returns(uint256 _reth_added_to_stake) {\n        require(msg.sender == rocket_stake_address, \"Only RocketStake can do that\");\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketDepositPool\"))));\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\n        rocket_deposit_pool.deposit{ value: msg.value }();\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\n        return reth_added_to_stake;\n    }\n\n    function lastDepositBlock() external view returns(uint256 _last_deposit_block) {\n        require(msg.sender == rocket_stake_address, \"Only RocketStake can do that\");\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        return rocket_storage.getUint(keccak256(abi.encodePacked(\"user.deposit.block\", address(this))));\n    }\n}\n\ncontract RocketStake is IRocketStake {\n    using SafeMath for uint256;\n\n    struct Staker {\n        RETHBuyer reth_buyer;\n        uint256 staked_reth;\n        bool exists;\n    }\n\n    uint256 total_reth_held;\n    mapping(address => Staker) internal stakers;\n    address rocket_storage_address;\n\n    constructor(address _rocket_storage_address) {\n        rocket_storage_address = _rocket_storage_address;\n    }\n\n    receive() external payable {}\n\n    function register() external override {\n        if (stakers[msg.sender].exists != true) {\n            stakers[msg.sender].exists = true;\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\n            emit Register(msg.sender);\n        }\n    }\n\n    function stake() external payable override {\n        require(msg.value > 0, \"You must send a non-zero amount of eth to stake.\");\n        \n        // register and create reth_buyer if doesn't exist already\n        if (stakers[msg.sender].exists != true) {\n            stakers[msg.sender].exists = true;\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\n            emit Register(msg.sender);\n        }\n\n        // have the reth_buyer deposit eth for rETH and hold on to it\n        uint256 reth_added_to_stake = stakers[msg.sender].reth_buyer.deposit{ value: msg.value }();\n\n        // update balances\n        total_reth_held = total_reth_held.add(reth_added_to_stake);\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\n    }\n\n    function withdraw(uint256 eth_amount) external override {\n        require(stakers[msg.sender].exists == true, \"Nothing staked here.\");\n        require(stakers[msg.sender].staked_reth > 0, \"Nothing staked here.\");\n        require(eth_amount > 0, \"You must withdraw more than 0 ETH\");\n        require(depositCooldownPassed(msg.sender) == true, \"Rocket Pool will not let you move or withdraw your rETH yet.\");\n        \n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        \n        // ensure there is enough eth available in RP's system\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \"Not enough collateral available in Rocket Pool\");\n\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[msg.sender].staked_reth);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot withdraw more ETH than you have staked.\");\n\n        // transfer the reth to burn to the buyer contract, run the burn function, and deduct the total burnt\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\n        total_reth_held = total_reth_held.sub(reth_to_burn);\n        uint256 eth_received = stakers[msg.sender].reth_buyer.burn(reth_to_burn);\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.sub(reth_to_burn);\n\n        // transfer staker ETH last to prevent re-entrancy\n        payable(msg.sender).transfer(eth_received);\n        emit AccountWithdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\n    }\n\n    function migrate(\n        address next_contract_address,\n        uint256 eth_amount\n    ) override public {\n        // make sure there is a stake to migrate and \n        // that we aren't migrating into a non-existant address\n        require(eth_amount > 0, \"You must migrate some ETH\");\n        require(stakers[msg.sender].staked_reth > 0, \"You are not staking any ETH\");\n        require(next_contract_address != address(0), \"Cannot migrate to non-existant contract\");\n        require(depositCooldownPassed(msg.sender) == true, \"Rocket Pool will not let you move or withdraw your rETH yet.\");\n\n        // setup RP contracts\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n\n        // ensure there is enough eth available in RP's system\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \"Not enough collateral available in Rocket Pool\");\n\n        // calculate the ETH value of our rETH staked and prevent overdrawing\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[msg.sender].staked_reth);\n        require(eth_amount <= eth_able_to_be_withdrawn, \"You cannot migrate that much.\");\n\n        // transfer the reth to burn to the buyer contract, run the burn function, and deduct the total burnt\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\n        total_reth_held = total_reth_held.sub(reth_to_burn);\n        uint256 eth_received = stakers[msg.sender].reth_buyer.burn(reth_to_burn);\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.sub(reth_to_burn);\n\n        // go through the transfer protocol, caller better know they can trust the contract they're migrating to\n        IMigrationCompatible(next_contract_address).startTransfer(eth_received, msg.sender);\n        payable(msg.sender).transfer(eth_received);\n        IMigrationCompatible(next_contract_address).closeTransfer(eth_received, msg.sender);\n        total_reth_held = total_reth_held.sub(reth_to_burn);\n    }\n\n    function accountDepositDelay(address staker) override external view returns(\n        uint256 _last_deposit_block,\n        uint256 _block_number,\n        uint256 _deposit_delay\n    ) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\"dao.protocol.setting.network\"), \"network.reth.deposit.delay\")));\n        return(\n            stakers[staker].exists == true \n                ? stakers[staker].reth_buyer.lastDepositBlock()\n                : 0,\n            block.number,\n            deposit_delay\n        );\n    }\n    \n    function accountStakedETH(address staker) override external view returns(uint256 staked_eth) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(stakers[staker].staked_reth);\n    }\n\n    function accountStakedRETH(address staker) override external view returns(uint256 staked_reth) {\n        return stakers[staker].staked_reth;\n    }\n\n    function accountExists(address staker) override external view returns(bool exists) {\n        return stakers[staker].exists;\n    }\n\n    function accountBuyerAddress(address staker) external view returns(address) {\n        return stakers[staker].exists == true ? address(stakers[staker].reth_buyer) : address(0);\n    }\n\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getTotalCollateral();\n    }\n\n    function totalRETHHeld() external override view returns(uint256 collateral) {\n        return total_reth_held;\n    }\n\n    function totalETHHeld() external override view returns(uint256 collateral) {\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))));\n        return rocket_token_reth.getEthValue(total_reth_held);\n    }\n\n    function depositCooldownPassed(address staker) public override view returns(bool) {\n        if (stakers[staker].exists != true) {\n            return true;\n        }\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\"dao.protocol.setting.network\"), \"network.reth.deposit.delay\")));\n        return block.timestamp.sub(stakers[staker].reth_buyer.lastDepositBlock()) > deposit_delay;\n    }\n}"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary Counters {\n    struct Counter {\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
    },
    "contracts/interfaces/IRocketStake.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStake {\n    function stake() external payable; \n    function withdraw(uint256 eth_amount) external;\n    function totalRETHCollateral() external view returns(uint256);\n    function totalRETHHeld() external view returns(uint256);\n    function totalETHHeld() external view returns(uint256);\n    function register() external;\n    function migrate(address next_contract_address, uint256 eth_amount) external;\n    function depositCooldownPassed(address staker) external view returns(bool);\n    function accountDepositDelay(address staker) external view returns(\n        uint256 _last_deposit_block,\n        uint256 _block_number,\n        uint256 _deposit_delay\n    );\n    function accountStakedRETH(address staker) external view returns(uint256 staked_reth);\n    function accountExists(address staker) external view returns(bool exists);\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\n\n    event Register(address indexed staker_address);\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\n}"
    },
    "contracts/interfaces/IRocketStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketStorage {\n    function getUint(bytes32 _key) external view returns (uint);\n    function getAddress(bytes32 _key) external view returns (address);\n}"
    },
    "contracts/interfaces/IMigrationCompatible.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IMigrationCompatible {\n    function startTransfer(uint256 reth_amount, address staker) external; \n    function closeTransfer(uint256 reth_amount, address staker) external;\n}"
    },
    "contracts/interfaces/IRocketDepositPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\ninterface IRocketDepositPool {\n    function deposit() external payable;\n}"
    },
    "contracts/interfaces/IRocketTokenRETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity ^0.8.0;\n\nimport '../interfaces/IERC20.sol';\n\ninterface IRocketTokenRETH is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n    function distributeRewards() payable external;\n    function getTotalCollateral() external view returns (uint256);\n    function burn(uint256 _rethAmount) external returns (uint256);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}