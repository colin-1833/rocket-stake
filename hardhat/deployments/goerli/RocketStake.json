{
  "address": "0x1978B6f45b650C2B28d912Cc67B537E0Fb3BD22e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AccountWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AddStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountBuyerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountDepositDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_last_deposit_block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deposit_delay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountStakedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_eth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountStakedRETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "depositCooldownPassed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5577cf6973dc4a3bc2eace803258b91686a6568305f476d694c60cb670cd2724",
  "receipt": {
    "to": null,
    "from": "0xb89282E1Ae6e496a4817298e8bf2E5CbF5a4b770",
    "contractAddress": "0x1978B6f45b650C2B28d912Cc67B537E0Fb3BD22e",
    "transactionIndex": 3,
    "gasUsed": "3434715",
    "logsBloom": "0x
    "blockHash": "0xf27a9c4c8ba4d7ff1d3331c0929033100adf3e93067ef99e627c2ae77a4415a5",
    "transactionHash": "0x5577cf6973dc4a3bc2eace803258b91686a6568305f476d694c60cb670cd2724",
    "logs": [],
    "blockNumber": 5258553,
    "cumulativeGasUsed": "3579336",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8Cd47263414aFEca62d6e2a3917d6600abDceB3"
  ],
  "solcInputHash": "7169922ed604276b765f32801af35945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AccountWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AddStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountBuyerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountDepositDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_last_deposit_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposit_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountStakedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountStakedRETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"depositCooldownPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketStake.sol\":\"RocketStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './libraries/Counters.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRocketStake.sol';\\nimport './interfaces/IRocketStorage.sol';\\nimport './interfaces/IMigrationCompatible.sol';\\nimport './interfaces/IRocketDepositPool.sol';\\nimport './interfaces/IRocketTokenRETH.sol';\\n\\ncontract RETHBuyer {\\n    using SafeMath for uint256;\\n    \\n    address rocket_storage_address;\\n    address rocket_stake_address;\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n        rocket_stake_address = msg.sender;\\n    }\\n\\n    function burn(uint256 reth_amount) external returns(uint256 _eth_received) {\\n        require(msg.sender == rocket_stake_address, \\\"Only RocketStake can do that\\\");\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        uint256 starting_balance = address(this).balance;\\n        rocket_token_reth.burn(reth_amount);\\n        uint256 eth_received = address(this).balance.sub(starting_balance);\\n        payable(rocket_stake_address).transfer(eth_received);\\n        return eth_received;\\n    } \\n\\n    function deposit() payable external returns(uint256 _reth_added_to_stake) {\\n        require(msg.sender == rocket_stake_address, \\\"Only RocketStake can do that\\\");\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketDepositPool\\\"))));\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\\n        rocket_deposit_pool.deposit{ value: msg.value }();\\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\\n        return reth_added_to_stake;\\n    }\\n\\n    function lastDepositBlock() external view returns(uint256 _last_deposit_block) {\\n        require(msg.sender == rocket_stake_address, \\\"Only RocketStake can do that\\\");\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        return rocket_storage.getUint(keccak256(abi.encodePacked(\\\"user.deposit.block\\\", address(this))));\\n    }\\n}\\n\\ncontract RocketStake is IRocketStake {\\n    using SafeMath for uint256;\\n\\n    struct Staker {\\n        RETHBuyer reth_buyer;\\n        uint256 staked_reth;\\n        bool exists;\\n    }\\n\\n    uint256 total_reth_held;\\n    mapping(address => Staker) internal stakers;\\n    address rocket_storage_address;\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n    }\\n\\n    receive() external payable {}\\n\\n    function register() external override {\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n            emit Register(msg.sender);\\n        }\\n    }\\n\\n    function stake() external payable override {\\n        require(msg.value > 0, \\\"You must send a non-zero amount of eth to stake.\\\");\\n        \\n        // register and create reth_buyer if doesn't exist already\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n            emit Register(msg.sender);\\n        }\\n\\n        // have the reth_buyer deposit eth for rETH and hold on to it\\n        uint256 reth_added_to_stake = stakers[msg.sender].reth_buyer.deposit{ value: msg.value }();\\n\\n        // update balances\\n        total_reth_held = total_reth_held.add(reth_added_to_stake);\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function withdraw(uint256 eth_amount) external override {\\n        require(stakers[msg.sender].exists == true, \\\"Nothing staked here.\\\");\\n        require(stakers[msg.sender].staked_reth > 0, \\\"Nothing staked here.\\\");\\n        require(eth_amount > 0, \\\"You must withdraw more than 0 ETH\\\");\\n        require(depositCooldownPassed(msg.sender) == true, \\\"Rocket Pool will not let you move or withdraw your rETH yet.\\\");\\n        \\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        \\n        // ensure there is enough eth available in RP's system\\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \\\"Not enough collateral available in Rocket Pool\\\");\\n\\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[msg.sender].staked_reth);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot withdraw more ETH than you have staked.\\\");\\n\\n        // transfer the reth to burn to the buyer contract, run the burn function, and deduct the total burnt\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n        total_reth_held = total_reth_held.sub(reth_to_burn);\\n        uint256 eth_received = stakers[msg.sender].reth_buyer.burn(reth_to_burn);\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.sub(reth_to_burn);\\n\\n        // transfer staker ETH last to prevent re-entrancy\\n        payable(msg.sender).transfer(eth_received);\\n        emit AccountWithdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function migrate(\\n        address next_contract_address,\\n        uint256 eth_amount\\n    ) override public {\\n        // make sure there is a stake to migrate and \\n        // that we aren't migrating into a non-existant address\\n        require(eth_amount > 0, \\\"You must migrate some ETH\\\");\\n        require(stakers[msg.sender].staked_reth > 0, \\\"You are not staking any ETH\\\");\\n        require(next_contract_address != address(0), \\\"Cannot migrate to non-existant contract\\\");\\n        require(depositCooldownPassed(msg.sender) == true, \\\"Rocket Pool will not let you move or withdraw your rETH yet.\\\");\\n\\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n\\n        // ensure there is enough eth available in RP's system\\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \\\"Not enough collateral available in Rocket Pool\\\");\\n\\n        // calculate the ETH value of our rETH staked and prevent overdrawing\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[msg.sender].staked_reth);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot migrate that much.\\\");\\n\\n        // transfer the reth to burn to the buyer contract, run the burn function, and deduct the total burnt\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n        total_reth_held = total_reth_held.sub(reth_to_burn);\\n        uint256 eth_received = stakers[msg.sender].reth_buyer.burn(reth_to_burn);\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.sub(reth_to_burn);\\n\\n        // go through the transfer protocol, caller better know they can trust the contract they're migrating to\\n        IMigrationCompatible(next_contract_address).startTransfer(eth_received, msg.sender);\\n        payable(msg.sender).transfer(eth_received);\\n        IMigrationCompatible(next_contract_address).closeTransfer(eth_received, msg.sender);\\n        total_reth_held = total_reth_held.sub(reth_to_burn);\\n    }\\n\\n    function accountDepositDelay(address staker) override external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    ) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\")));\\n        return(\\n            stakers[staker].exists == true \\n                ? stakers[staker].reth_buyer.lastDepositBlock()\\n                : 0,\\n            block.number,\\n            deposit_delay\\n        );\\n    }\\n    \\n    function accountStakedETH(address staker) override external view returns(uint256 staked_eth) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(stakers[staker].staked_reth);\\n    }\\n\\n    function accountStakedRETH(address staker) override external view returns(uint256 staked_reth) {\\n        return stakers[staker].staked_reth;\\n    }\\n\\n    function accountExists(address staker) override external view returns(bool exists) {\\n        return stakers[staker].exists;\\n    }\\n\\n    function accountBuyerAddress(address staker) external view returns(address) {\\n        return stakers[staker].exists == true ? address(stakers[staker].reth_buyer) : address(0);\\n    }\\n\\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getTotalCollateral();\\n    }\\n\\n    function totalRETHHeld() external override view returns(uint256 collateral) {\\n        return total_reth_held;\\n    }\\n\\n    function totalETHHeld() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(total_reth_held);\\n    }\\n\\n    function depositCooldownPassed(address staker) public override view returns(bool) {\\n        if (stakers[staker].exists != true) {\\n            return true;\\n        }\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\")));\\n        return block.timestamp.sub(stakers[staker].reth_buyer.lastDepositBlock()) > deposit_delay;\\n    }\\n}\",\"keccak256\":\"0x0c9172b099e5d92b236fffc09c50c3569b6d1e180ee983ca45c1b52a31ef33af\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x5bbe210d3ee7f8913d5ab8cc3543f6b073e085f7e234632861d5e5ae99cf0712\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IMigrationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IMigrationCompatible {\\n    function startTransfer(uint256 reth_amount, address staker) external; \\n    function closeTransfer(uint256 reth_amount, address staker) external;\\n}\",\"keccak256\":\"0xdc521df01124b36fb12bbe8f4eac66c2663b23f455d908b727eb6d8a3910a601\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketDepositPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketDepositPool {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xb5bd33ff314d42c78c158ba13089d59e460f059acfa340f670caf01cef9b59ca\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStake {\\n    function stake() external payable; \\n    function withdraw(uint256 eth_amount) external;\\n    function totalRETHCollateral() external view returns(uint256);\\n    function totalRETHHeld() external view returns(uint256);\\n    function totalETHHeld() external view returns(uint256);\\n    function register() external;\\n    function migrate(address next_contract_address, uint256 eth_amount) external;\\n    function depositCooldownPassed(address staker) external view returns(bool);\\n    function accountDepositDelay(address staker) external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    );\\n    function accountStakedRETH(address staker) external view returns(uint256 staked_reth);\\n    function accountExists(address staker) external view returns(bool exists);\\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\\n\\n    event Register(address indexed staker_address);\\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\\n}\",\"keccak256\":\"0x50f517ae02b6450eb0877581e8d593bf09d1c0e222e91723101cdba0b5d2239e\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStorage {\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getAddress(bytes32 _key) external view returns (address);\\n}\",\"keccak256\":\"0x4617dda7613f23f150ba847944391d7e6f4c60573986bf49b0b5cfa4548e4af5\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketTokenRETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n    function distributeRewards() payable external;\\n    function getTotalCollateral() external view returns (uint256);\\n    function burn(uint256 _rethAmount) external returns (uint256);\\n}\",\"keccak256\":\"0x4104ac5b3685a5f02b9dbe3c036cf985ac5c19f23c67bcb3150f11199a63410d\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x28482f213b4aabbe37903f331f1f240271d5cc3bc7a2c20fc3cdf0e4380d7788\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0x49990db7278b36c87d44c53dc2a9f306d5304a35a4e3add09305dbc844af920b\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003e1b38038062003e1b833981810160405281019062000037919062000096565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000110565b6000815190506200009081620000f6565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000d6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010181620000c2565b81146200010d57600080fd5b50565b613cfb80620001206000396000f3fe608060405260043610620000d95760003560e01c806395919404116200008b578063bc7f2f401162000061578063bc7f2f4014620002a8578063c4893c5114620002ee578063df58358f1462000332578063dff17357146200036257620000e1565b80639591940414620001f2578063ab4428281462000236578063ad68ebf7146200027a57620000e1565b806310cbe69214620000e65780631aa3a008146200012a5780632accfc0414620001445780632e1a7d4d14620001745780633a4b66f114620001a257806375cd51ed14620001ae57620000e1565b36620000e157005b600080fd5b348015620000f357600080fd5b506200011260048036038101906200010c9190620024d7565b62000392565b60405162000121919062002c5e565b60405180910390f35b3480156200013757600080fd5b5062000142620003de565b005b3480156200015157600080fd5b506200015c620005b5565b6040516200016b919062002c5e565b60405180910390f35b3480156200018157600080fd5b50620001a060048036038101906200019a919062002570565b6200072e565b005b620001ac62000ed3565b005b348015620001bb57600080fd5b50620001da6004803603810190620001d49190620024d7565b6200132c565b604051620001e9919062002ad0565b60405180910390f35b348015620001ff57600080fd5b506200021e6004803603810190620002189190620024d7565b62001385565b6040516200022d919062002ab3565b60405180910390f35b3480156200024357600080fd5b506200026260048036038101906200025c9190620024d7565b62001456565b60405162000271919062002c5e565b60405180910390f35b3480156200028757600080fd5b50620002a66004803603810190620002a091906200252f565b62001611565b005b348015620002b557600080fd5b50620002d46004803603810190620002ce9190620024d7565b62001dfc565b604051620002e59392919062002cd5565b60405180910390f35b348015620002fb57600080fd5b506200031a6004803603810190620003149190620024d7565b6200205c565b60405162000329919062002ad0565b60405180910390f35b3480156200033f57600080fd5b506200034a620022ca565b60405162000359919062002c5e565b60405180910390f35b3480156200036f57600080fd5b506200037a62002434565b60405162000389919062002c5e565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620005b35760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620004c5906200246d565b620004d1919062002ab3565b604051809103906000f080158015620004ee573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200060c9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162000640919062002aed565b60206040518083038186803b1580156200065957600080fd5b505afa1580156200066e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000694919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b8152600401620006d3919062002c5e565b60206040518083038186803b158015620006ec57600080fd5b505afa15801562000701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200072791906200259c565b9250505090565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620007c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007be9062002b92565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116200084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008469062002b92565b60405180910390fd5b6000811162000895576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200088c9062002c1a565b60405180910390fd5b60011515620008a4336200205c565b151514620008e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008e09062002b4e565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200093f9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162000973919062002aed565b60206040518083038186803b1580156200098c57600080fd5b505afa158015620009a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c7919062002503565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1157600080fd5b505afa15801562000a26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4c91906200259c565b101562000a90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a879062002b2c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162000b0f919062002c5e565b60206040518083038186803b15801562000b2857600080fd5b505afa15801562000b3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6391906200259c565b90508084111562000bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ba29062002bb4565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040162000be8919062002c5e565b60206040518083038186803b15801562000c0157600080fd5b505afa15801562000c16573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c3c91906200259c565b905062000c55816000546200243d90919063ffffffff16565b6000819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162000cfa919062002c5e565b602060405180830381600087803b15801562000d1557600080fd5b505af115801562000d2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5091906200259c565b905062000da982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200243d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000e36573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000ec392919062002ca8565b60405180910390a2505050505050565b6000341162000f19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f109062002b0a565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620010ee5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162001000906200246d565b6200100c919062002ab3565b604051809103906000f08015801562001029573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b1580156200119b57600080fd5b505af1158015620011b0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620011d791906200259c565b9050620011f0816000546200245590919063ffffffff16565b6000819055506200124d81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200245590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec8234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051620013219392919062002cd5565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620013eb5760006200144f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620014ad9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620014e1919062002aed565b60206040518083038186803b158015620014fa57600080fd5b505afa1580156200150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001535919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401620015b4919062002c5e565b60206040518083038186803b158015620015cd57600080fd5b505afa158015620015e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200160891906200259c565b92505050919050565b6000811162001657576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200164e9062002bd6565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411620016df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016d69062002bf8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017499062002b70565b60405180910390fd5b6001151562001761336200205c565b151514620017a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200179d9062002b4e565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620017fc9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001830919062002aed565b60206040518083038186803b1580156200184957600080fd5b505afa1580156200185e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001884919062002503565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015620018ce57600080fd5b505afa158015620018e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200190991906200259c565b10156200194d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019449062002b2c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401620019cc919062002c5e565b60206040518083038186803b158015620019e557600080fd5b505afa158015620019fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2091906200259c565b90508084111562001a68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a5f9062002c3c565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040162001aa5919062002c5e565b60206040518083038186803b15801562001abe57600080fd5b505afa15801562001ad3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af991906200259c565b905062001b12816000546200243d90919063ffffffff16565b6000819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162001bb7919062002c5e565b602060405180830381600087803b15801562001bd257600080fd5b505af115801562001be7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c0d91906200259c565b905062001c6682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200243d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508673ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b815260040162001ce992919062002c7b565b600060405180830381600087803b15801562001d0457600080fd5b505af115801562001d19573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562001d64573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b815260040162001da292919062002c7b565b600060405180830381600087803b15801562001dbd57600080fd5b505af115801562001dd2573d6000803e3d6000fd5b5050505062001ded826000546200243d90919063ffffffff16565b60008190555050505050505050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001e78919062002a65565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001eac919062002aed565b60206040518083038186803b15801562001ec557600080fd5b505afa15801562001eda573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f0091906200259c565b905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462001f665760006200204b565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200200f57600080fd5b505afa15801562002024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200204a91906200259c565b5b438294509450945050509193909250565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620020c45760019050620022c5565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da2156040516020016200213c919062002a65565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162002170919062002aed565b60206040518083038186803b1580156200218957600080fd5b505afa1580156200219e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021c491906200259c565b905080620022bf600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200227457600080fd5b505afa15801562002289573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022af91906200259c565b426200243d90919063ffffffff16565b11925050505b919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620023219062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162002355919062002aed565b60206040518083038186803b1580156200236e57600080fd5b505afa15801562002383573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023a9919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015620023f257600080fd5b505afa15801562002407573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200242d91906200259c565b9250505090565b60008054905090565b600081836200244d919062002d8b565b905092915050565b6000818362002465919062002d2e565b905092915050565b610e3e8062002e8883390190565b6000813590506200248c8162002e53565b92915050565b600081519050620024a38162002e53565b92915050565b600081359050620024ba8162002e6d565b92915050565b600081519050620024d18162002e6d565b92915050565b600060208284031215620024ea57600080fd5b6000620024fa848285016200247b565b91505092915050565b6000602082840312156200251657600080fd5b6000620025268482850162002492565b91505092915050565b600080604083850312156200254357600080fd5b600062002553858286016200247b565b92505060206200256685828601620024a9565b9150509250929050565b6000602082840312156200258357600080fd5b60006200259384828501620024a9565b91505092915050565b600060208284031215620025af57600080fd5b6000620025bf84828501620024c0565b91505092915050565b620025d38162002dc6565b82525050565b620025e48162002dda565b82525050565b620025f58162002de6565b82525050565b620026106200260a8262002de6565b62002e1a565b82525050565b60006200262560308362002d12565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006200268d601a8362002d23565b91507f6e6574776f726b2e726574682e6465706f7369742e64656c61790000000000006000830152601a82019050919050565b6000620026cf600f8362002d23565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b600062002711602e8362002d12565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b600062002779603c8362002d12565b91507f526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7660008301527f65206f7220776974686472617720796f75722072455448207965742e000000006020830152604082019050919050565b6000620027e160278362002d12565b91507f43616e6e6f74206d69677261746520746f206e6f6e2d6578697374616e74206360008301527f6f6e7472616374000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006200284960148362002d12565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b60006200288b60328362002d12565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000620028f360198362002d12565b91507f596f75206d757374206d69677261746520736f6d6520455448000000000000006000830152602082019050919050565b600062002935601b8362002d12565b91507f596f7520617265206e6f74207374616b696e6720616e792045544800000000006000830152602082019050919050565b60006200297760108362002d23565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000620029b960218362002d12565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002a21601d8362002d12565b91507f596f752063616e6e6f74206d6967726174652074686174206d7563682e0000006000830152602082019050919050565b62002a5f8162002e10565b82525050565b600062002a738284620025fb565b60208201915062002a84826200267e565b915081905092915050565b600062002a9c8262002968565b915062002aa982620026c0565b9150819050919050565b600060208201905062002aca6000830184620025c8565b92915050565b600060208201905062002ae76000830184620025d9565b92915050565b600060208201905062002b046000830184620025ea565b92915050565b6000602082019050818103600083015262002b258162002616565b9050919050565b6000602082019050818103600083015262002b478162002702565b9050919050565b6000602082019050818103600083015262002b69816200276a565b9050919050565b6000602082019050818103600083015262002b8b81620027d2565b9050919050565b6000602082019050818103600083015262002bad816200283a565b9050919050565b6000602082019050818103600083015262002bcf816200287c565b9050919050565b6000602082019050818103600083015262002bf181620028e4565b9050919050565b6000602082019050818103600083015262002c138162002926565b9050919050565b6000602082019050818103600083015262002c3581620029aa565b9050919050565b6000602082019050818103600083015262002c578162002a12565b9050919050565b600060208201905062002c75600083018462002a54565b92915050565b600060408201905062002c92600083018562002a54565b62002ca16020830184620025c8565b9392505050565b600060408201905062002cbf600083018562002a54565b62002cce602083018462002a54565b9392505050565b600060608201905062002cec600083018662002a54565b62002cfb602083018562002a54565b62002d0a604083018462002a54565b949350505050565b600082825260208201905092915050565b600081905092915050565b600062002d3b8262002e10565b915062002d488362002e10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562002d805762002d7f62002e24565b5b828201905092915050565b600062002d988262002e10565b915062002da58362002e10565b92508282101562002dbb5762002dba62002e24565b5b828203905092915050565b600062002dd38262002df0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b62002e5e8162002dc6565b811462002e6a57600080fd5b50565b62002e788162002e10565b811462002e8457600080fd5b5056fe608060405234801561001057600080fd5b50604051610e3e380380610e3e833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b610cef8061014f6000396000f3fe6080604052600436106100345760003560e01c80632a3d7c811461003957806342966c6814610064578063d0e30db0146100a1575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b9190610b7a565b60405180910390f35b34801561007057600080fd5b5061008b600480360381019061008691906108e8565b61022c565b6040516100989190610b7a565b60405180910390f35b6100a96104b2565b6040516100b69190610b7a565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014890610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5306040516020016101a49190610abe565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016101d69190610b3f565b60206040518083038186803b1580156101ee57600080fd5b505afa158015610202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102269190610911565b91505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b590610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161031190610ae4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103439190610b3f565b60206040518083038186803b15801561035b57600080fd5b505afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039391906108bf565b905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b81526004016103d39190610b7a565b602060405180830381600087803b1580156103ed57600080fd5b505af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610911565b50600061043b824761086a90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104a5573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161059790610b04565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105c99190610b3f565b60206040518083038186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906108bf565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161064890610ae4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161067a9190610b3f565b60206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906108bf565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107079190610b24565b60206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610911565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156107a157600080fd5b505af11580156107b5573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107f59190610b24565b60206040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190610911565b9050600061085c838361086a90919063ffffffff16565b905080965050505050505090565b600081836108789190610bb1565b905092915050565b60008151905061088f81610c8b565b92915050565b6000813590506108a481610ca2565b92915050565b6000815190506108b981610ca2565b92915050565b6000602082840312156108d157600080fd5b60006108df84828501610880565b91505092915050565b6000602082840312156108fa57600080fd5b600061090884828501610895565b91505092915050565b60006020828403121561092357600080fd5b6000610931848285016108aa565b91505092915050565b61094381610be5565b82525050565b61095a61095582610be5565b610c2b565b82525050565b61096981610bf7565b82525050565b600061097c601283610ba6565b91507f757365722e6465706f7369742e626c6f636b00000000000000000000000000006000830152601282019050919050565b60006109bc600f83610ba6565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b60006109fc601083610ba6565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000610a3c601c83610b95565b91507f4f6e6c7920526f636b65745374616b652063616e20646f2074686174000000006000830152602082019050919050565b6000610a7c601183610ba6565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b610ab881610c21565b82525050565b6000610ac98261096f565b9150610ad58284610949565b60148201915081905092915050565b6000610aef826109ef565b9150610afa826109af565b9150819050919050565b6000610b0f826109ef565b9150610b1a82610a6f565b9150819050919050565b6000602082019050610b39600083018461093a565b92915050565b6000602082019050610b546000830184610960565b92915050565b60006020820190508181036000830152610b7381610a2f565b9050919050565b6000602082019050610b8f6000830184610aaf565b92915050565b600082825260208201905092915050565b600081905092915050565b6000610bbc82610c21565b9150610bc783610c21565b925082821015610bda57610bd9610c4f565b5b828203905092915050565b6000610bf082610c01565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c3682610c3d565b9050919050565b6000610c4882610c7e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160601b9050919050565b610c9481610be5565b8114610c9f57600080fd5b50565b610cab81610c21565b8114610cb657600080fd5b5056fea26469706673582212201ef6b8b7e1bfd222913cdb0e34bfec0cc18db21aaa359152752c792e1ba3536964736f6c63430008000033a264697066735822122022ddc11c97ced4547ddc6f44cea15bae52c3b5ccc88f88b18eb96905448efe4564736f6c63430008000033",
  "deployedBytecode": "0x608060405260043610620000d95760003560e01c806395919404116200008b578063bc7f2f401162000061578063bc7f2f4014620002a8578063c4893c5114620002ee578063df58358f1462000332578063dff17357146200036257620000e1565b80639591940414620001f2578063ab4428281462000236578063ad68ebf7146200027a57620000e1565b806310cbe69214620000e65780631aa3a008146200012a5780632accfc0414620001445780632e1a7d4d14620001745780633a4b66f114620001a257806375cd51ed14620001ae57620000e1565b36620000e157005b600080fd5b348015620000f357600080fd5b506200011260048036038101906200010c9190620024d7565b62000392565b60405162000121919062002c5e565b60405180910390f35b3480156200013757600080fd5b5062000142620003de565b005b3480156200015157600080fd5b506200015c620005b5565b6040516200016b919062002c5e565b60405180910390f35b3480156200018157600080fd5b50620001a060048036038101906200019a919062002570565b6200072e565b005b620001ac62000ed3565b005b348015620001bb57600080fd5b50620001da6004803603810190620001d49190620024d7565b6200132c565b604051620001e9919062002ad0565b60405180910390f35b348015620001ff57600080fd5b506200021e6004803603810190620002189190620024d7565b62001385565b6040516200022d919062002ab3565b60405180910390f35b3480156200024357600080fd5b506200026260048036038101906200025c9190620024d7565b62001456565b60405162000271919062002c5e565b60405180910390f35b3480156200028757600080fd5b50620002a66004803603810190620002a091906200252f565b62001611565b005b348015620002b557600080fd5b50620002d46004803603810190620002ce9190620024d7565b62001dfc565b604051620002e59392919062002cd5565b60405180910390f35b348015620002fb57600080fd5b506200031a6004803603810190620003149190620024d7565b6200205c565b60405162000329919062002ad0565b60405180910390f35b3480156200033f57600080fd5b506200034a620022ca565b60405162000359919062002c5e565b60405180910390f35b3480156200036f57600080fd5b506200037a62002434565b60405162000389919062002c5e565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620005b35760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620004c5906200246d565b620004d1919062002ab3565b604051809103906000f080158015620004ee573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200060c9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162000640919062002aed565b60206040518083038186803b1580156200065957600080fd5b505afa1580156200066e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000694919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b8152600401620006d3919062002c5e565b60206040518083038186803b158015620006ec57600080fd5b505afa15801562000701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200072791906200259c565b9250505090565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620007c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007be9062002b92565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116200084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008469062002b92565b60405180910390fd5b6000811162000895576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200088c9062002c1a565b60405180910390fd5b60011515620008a4336200205c565b151514620008e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008e09062002b4e565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200093f9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162000973919062002aed565b60206040518083038186803b1580156200098c57600080fd5b505afa158015620009a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c7919062002503565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1157600080fd5b505afa15801562000a26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4c91906200259c565b101562000a90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a879062002b2c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162000b0f919062002c5e565b60206040518083038186803b15801562000b2857600080fd5b505afa15801562000b3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6391906200259c565b90508084111562000bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ba29062002bb4565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040162000be8919062002c5e565b60206040518083038186803b15801562000c0157600080fd5b505afa15801562000c16573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c3c91906200259c565b905062000c55816000546200243d90919063ffffffff16565b6000819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162000cfa919062002c5e565b602060405180830381600087803b15801562000d1557600080fd5b505af115801562000d2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5091906200259c565b905062000da982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200243d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000e36573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000ec392919062002ca8565b60405180910390a2505050505050565b6000341162000f19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f109062002b0a565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620010ee5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162001000906200246d565b6200100c919062002ab3565b604051809103906000f08015801562001029573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b1580156200119b57600080fd5b505af1158015620011b0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620011d791906200259c565b9050620011f0816000546200245590919063ffffffff16565b6000819055506200124d81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200245590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec8234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051620013219392919062002cd5565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620013eb5760006200144f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620014ad9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620014e1919062002aed565b60206040518083038186803b158015620014fa57600080fd5b505afa1580156200150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001535919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401620015b4919062002c5e565b60206040518083038186803b158015620015cd57600080fd5b505afa158015620015e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200160891906200259c565b92505050919050565b6000811162001657576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200164e9062002bd6565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411620016df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016d69062002bf8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017499062002b70565b60405180910390fd5b6001151562001761336200205c565b151514620017a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200179d9062002b4e565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620017fc9062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001830919062002aed565b60206040518083038186803b1580156200184957600080fd5b505afa1580156200185e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001884919062002503565b9050828173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015620018ce57600080fd5b505afa158015620018e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200190991906200259c565b10156200194d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019449062002b2c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401620019cc919062002c5e565b60206040518083038186803b158015620019e557600080fd5b505afa158015620019fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2091906200259c565b90508084111562001a68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a5f9062002c3c565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e866040518263ffffffff1660e01b815260040162001aa5919062002c5e565b60206040518083038186803b15801562001abe57600080fd5b505afa15801562001ad3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af991906200259c565b905062001b12816000546200243d90919063ffffffff16565b6000819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162001bb7919062002c5e565b602060405180830381600087803b15801562001bd257600080fd5b505af115801562001be7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c0d91906200259c565b905062001c6682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200243d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508673ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b815260040162001ce992919062002c7b565b600060405180830381600087803b15801562001d0457600080fd5b505af115801562001d19573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562001d64573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b815260040162001da292919062002c7b565b600060405180830381600087803b15801562001dbd57600080fd5b505af115801562001dd2573d6000803e3d6000fd5b5050505062001ded826000546200243d90919063ffffffff16565b60008190555050505050505050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001e78919062002a65565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001eac919062002aed565b60206040518083038186803b15801562001ec557600080fd5b505afa15801562001eda573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f0091906200259c565b905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462001f665760006200204b565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200200f57600080fd5b505afa15801562002024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200204a91906200259c565b5b438294509450945050509193909250565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620020c45760019050620022c5565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da2156040516020016200213c919062002a65565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162002170919062002aed565b60206040518083038186803b1580156200218957600080fd5b505afa1580156200219e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021c491906200259c565b905080620022bf600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200227457600080fd5b505afa15801562002289573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022af91906200259c565b426200243d90919063ffffffff16565b11925050505b919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620023219062002a8f565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162002355919062002aed565b60206040518083038186803b1580156200236e57600080fd5b505afa15801562002383573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023a9919062002503565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015620023f257600080fd5b505afa15801562002407573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200242d91906200259c565b9250505090565b60008054905090565b600081836200244d919062002d8b565b905092915050565b6000818362002465919062002d2e565b905092915050565b610e3e8062002e8883390190565b6000813590506200248c8162002e53565b92915050565b600081519050620024a38162002e53565b92915050565b600081359050620024ba8162002e6d565b92915050565b600081519050620024d18162002e6d565b92915050565b600060208284031215620024ea57600080fd5b6000620024fa848285016200247b565b91505092915050565b6000602082840312156200251657600080fd5b6000620025268482850162002492565b91505092915050565b600080604083850312156200254357600080fd5b600062002553858286016200247b565b92505060206200256685828601620024a9565b9150509250929050565b6000602082840312156200258357600080fd5b60006200259384828501620024a9565b91505092915050565b600060208284031215620025af57600080fd5b6000620025bf84828501620024c0565b91505092915050565b620025d38162002dc6565b82525050565b620025e48162002dda565b82525050565b620025f58162002de6565b82525050565b620026106200260a8262002de6565b62002e1a565b82525050565b60006200262560308362002d12565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006200268d601a8362002d23565b91507f6e6574776f726b2e726574682e6465706f7369742e64656c61790000000000006000830152601a82019050919050565b6000620026cf600f8362002d23565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b600062002711602e8362002d12565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b600062002779603c8362002d12565b91507f526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7660008301527f65206f7220776974686472617720796f75722072455448207965742e000000006020830152604082019050919050565b6000620027e160278362002d12565b91507f43616e6e6f74206d69677261746520746f206e6f6e2d6578697374616e74206360008301527f6f6e7472616374000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006200284960148362002d12565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b60006200288b60328362002d12565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000620028f360198362002d12565b91507f596f75206d757374206d69677261746520736f6d6520455448000000000000006000830152602082019050919050565b600062002935601b8362002d12565b91507f596f7520617265206e6f74207374616b696e6720616e792045544800000000006000830152602082019050919050565b60006200297760108362002d23565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000620029b960218362002d12565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002a21601d8362002d12565b91507f596f752063616e6e6f74206d6967726174652074686174206d7563682e0000006000830152602082019050919050565b62002a5f8162002e10565b82525050565b600062002a738284620025fb565b60208201915062002a84826200267e565b915081905092915050565b600062002a9c8262002968565b915062002aa982620026c0565b9150819050919050565b600060208201905062002aca6000830184620025c8565b92915050565b600060208201905062002ae76000830184620025d9565b92915050565b600060208201905062002b046000830184620025ea565b92915050565b6000602082019050818103600083015262002b258162002616565b9050919050565b6000602082019050818103600083015262002b478162002702565b9050919050565b6000602082019050818103600083015262002b69816200276a565b9050919050565b6000602082019050818103600083015262002b8b81620027d2565b9050919050565b6000602082019050818103600083015262002bad816200283a565b9050919050565b6000602082019050818103600083015262002bcf816200287c565b9050919050565b6000602082019050818103600083015262002bf181620028e4565b9050919050565b6000602082019050818103600083015262002c138162002926565b9050919050565b6000602082019050818103600083015262002c3581620029aa565b9050919050565b6000602082019050818103600083015262002c578162002a12565b9050919050565b600060208201905062002c75600083018462002a54565b92915050565b600060408201905062002c92600083018562002a54565b62002ca16020830184620025c8565b9392505050565b600060408201905062002cbf600083018562002a54565b62002cce602083018462002a54565b9392505050565b600060608201905062002cec600083018662002a54565b62002cfb602083018562002a54565b62002d0a604083018462002a54565b949350505050565b600082825260208201905092915050565b600081905092915050565b600062002d3b8262002e10565b915062002d488362002e10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562002d805762002d7f62002e24565b5b828201905092915050565b600062002d988262002e10565b915062002da58362002e10565b92508282101562002dbb5762002dba62002e24565b5b828203905092915050565b600062002dd38262002df0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b62002e5e8162002dc6565b811462002e6a57600080fd5b50565b62002e788162002e10565b811462002e8457600080fd5b5056fe608060405234801561001057600080fd5b50604051610e3e380380610e3e833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b610cef8061014f6000396000f3fe6080604052600436106100345760003560e01c80632a3d7c811461003957806342966c6814610064578063d0e30db0146100a1575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b9190610b7a565b60405180910390f35b34801561007057600080fd5b5061008b600480360381019061008691906108e8565b61022c565b6040516100989190610b7a565b60405180910390f35b6100a96104b2565b6040516100b69190610b7a565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014890610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5306040516020016101a49190610abe565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016101d69190610b3f565b60206040518083038186803b1580156101ee57600080fd5b505afa158015610202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102269190610911565b91505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b590610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161031190610ae4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103439190610b3f565b60206040518083038186803b15801561035b57600080fd5b505afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039391906108bf565b905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b81526004016103d39190610b7a565b602060405180830381600087803b1580156103ed57600080fd5b505af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610911565b50600061043b824761086a90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104a5573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610b5a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161059790610b04565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105c99190610b3f565b60206040518083038186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906108bf565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161064890610ae4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161067a9190610b3f565b60206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906108bf565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107079190610b24565b60206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610911565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156107a157600080fd5b505af11580156107b5573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107f59190610b24565b60206040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190610911565b9050600061085c838361086a90919063ffffffff16565b905080965050505050505090565b600081836108789190610bb1565b905092915050565b60008151905061088f81610c8b565b92915050565b6000813590506108a481610ca2565b92915050565b6000815190506108b981610ca2565b92915050565b6000602082840312156108d157600080fd5b60006108df84828501610880565b91505092915050565b6000602082840312156108fa57600080fd5b600061090884828501610895565b91505092915050565b60006020828403121561092357600080fd5b6000610931848285016108aa565b91505092915050565b61094381610be5565b82525050565b61095a61095582610be5565b610c2b565b82525050565b61096981610bf7565b82525050565b600061097c601283610ba6565b91507f757365722e6465706f7369742e626c6f636b00000000000000000000000000006000830152601282019050919050565b60006109bc600f83610ba6565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b60006109fc601083610ba6565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000610a3c601c83610b95565b91507f4f6e6c7920526f636b65745374616b652063616e20646f2074686174000000006000830152602082019050919050565b6000610a7c601183610ba6565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b610ab881610c21565b82525050565b6000610ac98261096f565b9150610ad58284610949565b60148201915081905092915050565b6000610aef826109ef565b9150610afa826109af565b9150819050919050565b6000610b0f826109ef565b9150610b1a82610a6f565b9150819050919050565b6000602082019050610b39600083018461093a565b92915050565b6000602082019050610b546000830184610960565b92915050565b60006020820190508181036000830152610b7381610a2f565b9050919050565b6000602082019050610b8f6000830184610aaf565b92915050565b600082825260208201905092915050565b600081905092915050565b6000610bbc82610c21565b9150610bc783610c21565b925082821015610bda57610bd9610c4f565b5b828203905092915050565b6000610bf082610c01565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c3682610c3d565b9050919050565b6000610c4882610c7e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160601b9050919050565b610c9481610be5565b8114610c9f57600080fd5b50565b610cab81610c21565b8114610cb657600080fd5b5056fea26469706673582212201ef6b8b7e1bfd222913cdb0e34bfec0cc18db21aaa359152752c792e1ba3536964736f6c63430008000033a264697066735822122022ddc11c97ced4547ddc6f44cea15bae52c3b5ccc88f88b18eb96905448efe4564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "total_reth_held",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 251,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "stakers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Staker)244_storage)"
      },
      {
        "astId": 253,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_storage_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RETHBuyer)231": {
        "encoding": "inplace",
        "label": "contract RETHBuyer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)244_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RocketStake.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)244_storage"
      },
      "t_struct(Staker)244_storage": {
        "encoding": "inplace",
        "label": "struct RocketStake.Staker",
        "members": [
          {
            "astId": 239,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "reth_buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(RETHBuyer)231"
          },
          {
            "astId": 241,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "staked_reth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 243,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}