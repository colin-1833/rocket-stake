{
  "address": "0xfC273eA613f0b72E2f5479961532AA290879cC29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_received",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "buyerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "depositDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_last_deposit_block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deposit_delay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "next_contract_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "registered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketPoolRETHCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_eth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakedRETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcc69efe1e3d935676b05dbce6c1416a791336d12966c2c6195f1f3a6803ce698",
  "receipt": {
    "to": null,
    "from": "0xb89282E1Ae6e496a4817298e8bf2E5CbF5a4b770",
    "contractAddress": "0xfC273eA613f0b72E2f5479961532AA290879cC29",
    "transactionIndex": 2,
    "gasUsed": "3207200",
    "logsBloom": "0x
    "blockHash": "0x010f9824dcfd6dd76e3a129128d94f2538500230a15a02bf9e00d26e310950fa",
    "transactionHash": "0xcc69efe1e3d935676b05dbce6c1416a791336d12966c2c6195f1f3a6803ce698",
    "logs": [],
    "blockNumber": 5278305,
    "cumulativeGasUsed": "3558622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8Cd47263414aFEca62d6e2a3917d6600abDceB3"
  ],
  "solcInputHash": "161771ddf806a627c266ce82b9a7ea9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_received\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"buyerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"depositDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_last_deposit_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposit_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"next_contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketPoolRETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedRETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketStake.sol\":\"RocketStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './libraries/Counters.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRocketStake.sol';\\nimport './interfaces/IRocketStorage.sol';\\nimport './interfaces/IMigrationCompatible.sol';\\nimport './interfaces/IRocketDepositPool.sol';\\nimport './interfaces/IRocketTokenRETH.sol';\\n\\ncontract RETHBuyer {\\n    using SafeMath for uint256;\\n    \\n    address rocket_storage_address;\\n    address owner;\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only RocketStake can do that\\\");\\n        _;\\n    }\\n\\n    function burn(uint256 reth_amount) external onlyOwner returns(uint256 _eth_received) {\\n        require(reth_amount > 0, \\\"You must burn a non zero positive amount of reth\\\");\\n\\n        // setup RP\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n\\n        // burn the reth specified and record this contract's balance change\\n        uint256 starting_balance = address(this).balance;\\n        rocket_token_reth.burn(reth_amount);\\n        uint256 eth_received = address(this).balance.sub(starting_balance);\\n\\n        // send the owner of this contract the eth received from rocket pool and return\\n        payable(owner).transfer(eth_received);\\n        return eth_received;\\n    } \\n\\n    function deposit() payable external onlyOwner returns(uint256 _reth_added_to_stake) {\\n        require(msg.value > 0, \\\"Must deposit a non-zero amount of ETH\\\");\\n\\n        // setup RP\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketDepositPool\\\"))));\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n\\n        // deposit msg.value into rocket pool and record the change in our rETH balance as a result\\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\\n        rocket_deposit_pool.deposit{ value: msg.value }();\\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\\n\\n        // return the change in total rETH held by this contract\\n        return reth_supply_after.sub(reth_supply_before);\\n    }\\n\\n    function lastDepositBlock() external view returns(uint256 _last_deposit_block) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        return rocket_storage.getUint(keccak256(abi.encodePacked(\\\"user.deposit.block\\\", address(this))));\\n    }\\n}\\n\\ncontract RocketStake is IRocketStake {\\n    using SafeMath for uint256;\\n\\n    struct Staker {\\n        RETHBuyer reth_buyer;\\n        uint256 staked_reth;\\n        bool exists;\\n    }\\n\\n    uint256 total_reth_held;\\n    mapping(address => Staker) internal stakers;\\n    address rocket_storage_address;\\n\\n    constructor(address _rocket_storage_address) {\\n        rocket_storage_address = _rocket_storage_address;\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier safeWithdrawal(uint256 eth_amount, address staker) {\\n        require(eth_amount > 0, \\\"You must withdraw more than 0 ETH\\\");\\n        require(stakers[staker].exists == true, \\\"Staker not registered yet.\\\");\\n        require(stakers[staker].staked_reth > 0, \\\"Nothing staked here.\\\");\\n\\n        // ensures that the staker has waited long enough to withdraw from rocket pool\\n        // rocket pool has a cooldown period after minting rETH \\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        require(\\n            block.timestamp.sub(stakers[staker].reth_buyer.lastDepositBlock())\\n                > rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\"))), \\n            \\\"Rocket Pool will not let you move or withdraw your rETH yet.\\\"\\n        );\\n        _;\\n    } \\n\\n    function register() external override {\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n\\n            emit Register(msg.sender);\\n        }\\n    }\\n\\n    function stake() external payable override {\\n        require(msg.value > 0, \\\"You must send a non-zero amount of eth to stake.\\\");\\n        \\n        // register and create reth_buyer if doesn't exist already\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            stakers[msg.sender].reth_buyer = new RETHBuyer(rocket_storage_address);\\n\\n            emit Register(msg.sender);\\n        }\\n\\n        // have the reth_buyer deposit eth for rETH and hold on to it\\n        // this value will never equal zero because Rocket Pool reverts when depositing an amount below their set minimum\\n        // note: ui should prevent reverting due to lower than minimum deposit error\\n        uint256 reth_added_to_stake = stakers[msg.sender].reth_buyer.deposit{ value: msg.value }();\\n\\n        // update balances\\n        total_reth_held = total_reth_held.add(reth_added_to_stake);\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\\n\\n        emit Stake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function withdraw(uint256 eth_amount) external override safeWithdrawal(eth_amount, msg.sender) {\\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\\n\\n        // send the received eth to the staker\\n        payable(msg.sender).transfer(eth_received);\\n\\n        emit Withdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\\n    }\\n\\n    function migrate(\\n        address next_contract_address,\\n        uint256 eth_amount\\n    ) override external safeWithdrawal(eth_amount, msg.sender) {\\n        uint256 eth_received = _burnAndReturnETH(eth_amount, msg.sender);\\n\\n        // send the user's funds to a contract of their choosing\\n        IMigrationCompatible(next_contract_address).startTransfer(eth_received, msg.sender);\\n        payable(next_contract_address).transfer(eth_received);\\n        IMigrationCompatible(next_contract_address).closeTransfer(eth_received, msg.sender);\\n\\n        emit Migrate(msg.sender, next_contract_address, eth_received);\\n    }\\n\\n    function depositDelay(address staker) override external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    ) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        uint256 deposit_delay = rocket_storage.getUint(keccak256(abi.encodePacked(keccak256(\\\"dao.protocol.setting.network\\\"), \\\"network.reth.deposit.delay\\\")));\\n        return(\\n            stakers[staker].exists == true \\n                ? stakers[staker].reth_buyer.lastDepositBlock()\\n                : 0,\\n            block.number,\\n            deposit_delay\\n        );\\n    }\\n    \\n    function stakedETH(address staker) override external view returns(uint256 staked_eth) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(stakers[staker].staked_reth);\\n    }\\n\\n    function stakedRETH(address staker) override external view returns(uint256 staked_reth) {\\n        return stakers[staker].staked_reth;\\n    }\\n\\n    function registered(address staker) override external view returns(bool exists) {\\n        return stakers[staker].exists;\\n    }\\n\\n    function buyerAddress(address staker) override external view returns(address) {\\n        return stakers[staker].exists == true ? address(stakers[staker].reth_buyer) : address(0);\\n    }\\n\\n    function rocketPoolRETHCollateral() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getTotalCollateral();\\n    }\\n\\n    function totalRETHHeld() external override view returns(uint256 collateral) {\\n        return total_reth_held;\\n    }\\n\\n    function totalETHHeld() external override view returns(uint256 collateral) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        return rocket_token_reth.getEthValue(total_reth_held);\\n    }\\n\\n    function _burnAndReturnETH(uint256 eth_amount, address staker) internal returns(uint256 _eth_received) {\\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketTokenRETH\\\"))));\\n        \\n        // make sure the staker is not trying to withdraw more ETH than their staked rETH is worth\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[staker].staked_reth);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot withdraw more ETH than you have staked.\\\");\\n\\n        // determine how much rETH the supplied eth_amount translates to\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n\\n        // tell the buyer contract to burn some of its rETH and send the resulting ETH proceeds back to this contract\\n        uint256 eth_received = stakers[staker].reth_buyer.burn(reth_to_burn);\\n\\n        // add a check in the odd case where no ETH is return by the reth_buyers burn function\\n        require(eth_received > 0, \\\"No ETH was received from the rETH burn\\\");\\n\\n        // update balances\\n        total_reth_held = total_reth_held.sub(reth_to_burn);\\n        stakers[staker].staked_reth = stakers[staker].staked_reth.sub(reth_to_burn);\\n\\n        return eth_received;\\n    }\\n}\",\"keccak256\":\"0x2231c07abbd49fcbd3ee1fa7eaa39691d383b9eb88c48fa157e552c2fe2acbdf\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x5bbe210d3ee7f8913d5ab8cc3543f6b073e085f7e234632861d5e5ae99cf0712\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IMigrationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IMigrationCompatible {\\n    function startTransfer(uint256 reth_amount, address staker) external; \\n    function closeTransfer(uint256 reth_amount, address staker) external;\\n}\",\"keccak256\":\"0xdc521df01124b36fb12bbe8f4eac66c2663b23f455d908b727eb6d8a3910a601\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketDepositPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketDepositPool {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xb5bd33ff314d42c78c158ba13089d59e460f059acfa340f670caf01cef9b59ca\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStake {\\n    // primary functions\\n    function stake() external payable; \\n    function withdraw(uint256 eth_amount) external;\\n    function register() external;\\n    function migrate(address next_contract_address, uint256 eth_amount) external;\\n\\n    // view functions\\n    function depositDelay(address staker) external view returns(\\n        uint256 _last_deposit_block,\\n        uint256 _block_number,\\n        uint256 _deposit_delay\\n    );\\n    function stakedETH(address staker) external view returns(uint256 eth_amount);\\n    function stakedRETH(address staker) external view returns(uint256 staked_reth);\\n    function registered(address staker) external view returns(bool exists);\\n    function buyerAddress(address staker) external view returns(address);\\n    function rocketPoolRETHCollateral() external view returns(uint256);\\n    function totalRETHHeld() external view returns(uint256);\\n    function totalETHHeld() external view returns(uint256);\\n\\n    // events\\n    event Register(address indexed staker_address);\\n    event Stake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\\n    event Withdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\\n    event Migrate(address indexed staker_address, address next_contract_address, uint256 eth_received);\\n}\",\"keccak256\":\"0x32f0be9461579fb8eb7f624334c8f36758d8d6ed1c8790d01ddf36f3688aed50\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStorage {\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getAddress(bytes32 _key) external view returns (address);\\n}\",\"keccak256\":\"0x4617dda7613f23f150ba847944391d7e6f4c60573986bf49b0b5cfa4548e4af5\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketTokenRETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n    function distributeRewards() payable external;\\n    function getTotalCollateral() external view returns (uint256);\\n    function burn(uint256 _rethAmount) external returns (uint256);\\n}\",\"keccak256\":\"0x4104ac5b3685a5f02b9dbe3c036cf985ac5c19f23c67bcb3150f11199a63410d\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x28482f213b4aabbe37903f331f1f240271d5cc3bc7a2c20fc3cdf0e4380d7788\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0x49990db7278b36c87d44c53dc2a9f306d5304a35a4e3add09305dbc844af920b\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620039fa380380620039fa833981810160405281019062000037919062000096565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000110565b6000815190506200009081620000f6565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000d6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010181620000c2565b81146200010d57600080fd5b50565b6138da80620001206000396000f3fe608060405260043610620000bb5760003560e01c806389625494116200006d5780638962549414620001d4578063ad68ebf71462000218578063b2dd5c071462000246578063c0f90f52146200028a578063d677491a14620002d0578063dff17357146200030057620000c3565b806318526a3c14620000c85780631aa3a008146200010c5780632accfc0414620001265780632e1a7d4d14620001565780633a4b66f1146200018457806372b8d470146200019057620000c3565b36620000c357005b600080fd5b348015620000d557600080fd5b50620000f46004803603810190620000ee9190620020d6565b62000330565b60405162000103919062002738565b60405180910390f35b3480156200011957600080fd5b50620001246200037c565b005b3480156200013357600080fd5b506200013e62000553565b6040516200014d919062002738565b60405180910390f35b3480156200016357600080fd5b506200018260048036038101906200017c91906200216f565b620006cc565b005b6200018e62000b61565b005b3480156200019d57600080fd5b50620001bc6004803603810190620001b69190620020d6565b62000fba565b604051620001cb919062002738565b60405180910390f35b348015620001e157600080fd5b50620002006004803603810190620001fa9190620020d6565b62001175565b6040516200020f9190620025c6565b60405180910390f35b3480156200022557600080fd5b506200024460048036038101906200023e91906200212e565b62001246565b005b3480156200025357600080fd5b506200027260048036038101906200026c9190620020d6565b6200177c565b60405162000281919062002610565b60405180910390f35b3480156200029757600080fd5b50620002b66004803603810190620002b09190620020d6565b620017d5565b604051620002c793929190620027af565b60405180910390f35b348015620002dd57600080fd5b50620002e862001a35565b604051620002f7919062002738565b60405180910390f35b3480156200030d57600080fd5b506200031862001b9f565b60405162000327919062002738565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620005515760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000463906200206c565b6200046f9190620025c6565b604051809103906000f0801580156200048c573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620005aa90620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620005de91906200262d565b60206040518083038186803b158015620005f757600080fd5b505afa1580156200060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000632919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b815260040162000671919062002738565b60206040518083038186803b1580156200068a57600080fd5b505afa1580156200069f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c591906200219b565b9250505090565b80336000821162000714576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070b9062002716565b60405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620007ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007a4906200266c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541162000835576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082c90620026d2565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da215604051602001620008ab919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620008df91906200262d565b60206040518083038186803b158015620008f857600080fd5b505afa1580156200090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200093391906200219b565b62000a2b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015620009e057600080fd5b505afa158015620009f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1b91906200219b565b4262001ba890919063ffffffff16565b1162000a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a6590620026b0565b60405180910390fd5b600062000a7c853362001bc0565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000ac5573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000b5292919062002782565b60405180910390a25050505050565b6000341162000ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b9e906200264a565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462000d7c5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000c8e906200206c565b62000c9a9190620025c6565b604051809103906000f08015801562000cb7573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b15801562000e2957600080fd5b505af115801562000e3e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000e6591906200219b565b905062000e7e816000546200205490919063ffffffff16565b60008190555062000edb81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200205490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4468234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000faf93929190620027af565b60405180910390a250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200101190620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200104591906200262d565b60206040518083038186803b1580156200105e57600080fd5b505afa15801562001073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001099919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162001118919062002738565b60206040518083038186803b1580156200113157600080fd5b505afa15801562001146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116c91906200219b565b92505050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620011db5760006200123f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b8033600082116200128e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012859062002716565b60405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462001327576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200131e906200266c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411620013af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013a690620026d2565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001425919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200145991906200262d565b60206040518083038186803b1580156200147257600080fd5b505afa15801562001487573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014ad91906200219b565b620015a5600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200155a57600080fd5b505afa1580156200156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200159591906200219b565b4262001ba890919063ffffffff16565b11620015e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015df90620026b0565b60405180910390fd5b6000620015f6853362001bc0565b90508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b81526004016200163592919062002755565b600060405180830381600087803b1580156200165057600080fd5b505af115801562001665573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015620016b0573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401620016ee92919062002755565b600060405180830381600087803b1580156200170957600080fd5b505af11580156200171e573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a87836040516200176c929190620025e3565b60405180910390a2505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001851919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200188591906200262d565b60206040518083038186803b1580156200189e57600080fd5b505afa158015620018b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018d991906200219b565b905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146200193f57600062001a24565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015620019e857600080fd5b505afa158015620019fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2391906200219b565b5b438294509450945050509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200162001a8c90620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001ac091906200262d565b60206040518083038186803b15801562001ad957600080fd5b505afa15801562001aee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b14919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b5d57600080fd5b505afa15801562001b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b9891906200219b565b9250505090565b60008054905090565b6000818362001bb8919062002865565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200162001c1790620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001c4b91906200262d565b60206040518083038186803b15801562001c6457600080fd5b505afa15801562001c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c9f919062002102565b905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162001d20919062002738565b60206040518083038186803b15801562001d3957600080fd5b505afa15801562001d4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d7491906200219b565b90508086111562001dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001db390620026f4565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e886040518263ffffffff1660e01b815260040162001df9919062002738565b60206040518083038186803b15801562001e1257600080fd5b505afa15801562001e27573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e4d91906200219b565b90506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162001eee919062002738565b602060405180830381600087803b15801562001f0957600080fd5b505af115801562001f1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f4491906200219b565b90506000811162001f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001f83906200268e565b60405180910390fd5b62001fa38260005462001ba890919063ffffffff16565b6000819055506200200082600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015462001ba890919063ffffffff16565b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550809550505050505092915050565b6000818362002064919062002808565b905092915050565b610f43806200296283390190565b6000813590506200208b816200292d565b92915050565b600081519050620020a2816200292d565b92915050565b600081359050620020b98162002947565b92915050565b600081519050620020d08162002947565b92915050565b600060208284031215620020e957600080fd5b6000620020f9848285016200207a565b91505092915050565b6000602082840312156200211557600080fd5b6000620021258482850162002091565b91505092915050565b600080604083850312156200214257600080fd5b600062002152858286016200207a565b92505060206200216585828601620020a8565b9150509250929050565b6000602082840312156200218257600080fd5b60006200219284828501620020a8565b91505092915050565b600060208284031215620021ae57600080fd5b6000620021be84828501620020bf565b91505092915050565b620021d281620028a0565b82525050565b620021e381620028b4565b82525050565b620021f481620028c0565b82525050565b6200220f6200220982620028c0565b620028f4565b82525050565b600062002224603083620027ec565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006200228c601a83620027fd565b91507f6e6574776f726b2e726574682e6465706f7369742e64656c61790000000000006000830152601a82019050919050565b6000620022ce601a83620027ec565b91507f5374616b6572206e6f742072656769737465726564207965742e0000000000006000830152602082019050919050565b600062002310600f83620027fd565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b600062002352602683620027ec565b91507f4e6f20455448207761732072656365697665642066726f6d207468652072455460008301527f48206275726e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620023ba603c83620027ec565b91507f526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7660008301527f65206f7220776974686472617720796f75722072455448207965742e000000006020830152604082019050919050565b600062002422601483620027ec565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b600062002464603283620027ec565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000620024cc601083620027fd565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b60006200250e602183620027ec565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6200257281620028ea565b82525050565b6000620025868284620021fa565b60208201915062002597826200227d565b915081905092915050565b6000620025af82620024bd565b9150620025bc8262002301565b9150819050919050565b6000602082019050620025dd6000830184620021c7565b92915050565b6000604082019050620025fa6000830185620021c7565b62002609602083018462002567565b9392505050565b6000602082019050620026276000830184620021d8565b92915050565b6000602082019050620026446000830184620021e9565b92915050565b60006020820190508181036000830152620026658162002215565b9050919050565b600060208201905081810360008301526200268781620022bf565b9050919050565b60006020820190508181036000830152620026a98162002343565b9050919050565b60006020820190508181036000830152620026cb81620023ab565b9050919050565b60006020820190508181036000830152620026ed8162002413565b9050919050565b600060208201905081810360008301526200270f8162002455565b9050919050565b600060208201905081810360008301526200273181620024ff565b9050919050565b60006020820190506200274f600083018462002567565b92915050565b60006040820190506200276c600083018562002567565b6200277b6020830184620021c7565b9392505050565b600060408201905062002799600083018562002567565b620027a8602083018462002567565b9392505050565b6000606082019050620027c6600083018662002567565b620027d5602083018562002567565b620027e4604083018462002567565b949350505050565b600082825260208201905092915050565b600081905092915050565b60006200281582620028ea565b91506200282283620028ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200285a5762002859620028fe565b5b828201905092915050565b60006200287282620028ea565b91506200287f83620028ea565b925082821015620028955762002894620028fe565b5b828203905092915050565b6000620028ad82620028ca565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6200293881620028a0565b81146200294457600080fd5b50565b6200295281620028ea565b81146200295e57600080fd5b5056fe608060405234801561001057600080fd5b50604051610f43380380610f43833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b610df48061014f6000396000f3fe6080604052600436106100385760003560e01c80632a3d7c811461004457806342966c681461006f578063d0e30db0146100ac5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100ca565b6040516100669190610c7f565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906108e1565b6101a5565b6040516100a39190610c7f565b60405180910390f35b6100b461046e565b6040516100c19190610c7f565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f53060405160200161011d9190610b83565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161014f9190610c04565b60206040518083038186803b15801561016757600080fd5b505afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f919061090a565b91505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022e90610c5f565b60405180910390fd5b6000821161027a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027190610c3f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016102cd90610ba9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016102ff9190610c04565b60206040518083038186803b15801561031757600080fd5b505afa15801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f91906108b8565b905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040161038f9190610c7f565b602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061090a565b5060006103f7824761086390919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610461573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610c5f565b60405180910390fd5b60003411610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053a90610c1f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161059690610bc9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105c89190610c04565b60206040518083038186803b1580156105e057600080fd5b505afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061891906108b8565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161064790610ba9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016106799190610c04565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906108b8565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107069190610be9565b60206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061090a565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107f49190610be9565b60206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610844919061090a565b9050610859828261086390919063ffffffff16565b9550505050505090565b600081836108719190610cb6565b905092915050565b60008151905061088881610d90565b92915050565b60008135905061089d81610da7565b92915050565b6000815190506108b281610da7565b92915050565b6000602082840312156108ca57600080fd5b60006108d884828501610879565b91505092915050565b6000602082840312156108f357600080fd5b60006109018482850161088e565b91505092915050565b60006020828403121561091c57600080fd5b600061092a848285016108a3565b91505092915050565b61093c81610cea565b82525050565b61095361094e82610cea565b610d30565b82525050565b61096281610cfc565b82525050565b6000610975601283610cab565b91507f757365722e6465706f7369742e626c6f636b00000000000000000000000000006000830152601282019050919050565b60006109b5602583610c9a565b91507f4d757374206465706f7369742061206e6f6e2d7a65726f20616d6f756e74206f60008301527f66204554480000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610a1b603083610c9a565b91507f596f75206d757374206275726e2061206e6f6e207a65726f20706f736974697660008301527f6520616d6f756e74206f662072657468000000000000000000000000000000006020830152604082019050919050565b6000610a81600f83610cab565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b6000610ac1601083610cab565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000610b01601c83610c9a565b91507f4f6e6c7920526f636b65745374616b652063616e20646f2074686174000000006000830152602082019050919050565b6000610b41601183610cab565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b610b7d81610d26565b82525050565b6000610b8e82610968565b9150610b9a8284610942565b60148201915081905092915050565b6000610bb482610ab4565b9150610bbf82610a74565b9150819050919050565b6000610bd482610ab4565b9150610bdf82610b34565b9150819050919050565b6000602082019050610bfe6000830184610933565b92915050565b6000602082019050610c196000830184610959565b92915050565b60006020820190508181036000830152610c38816109a8565b9050919050565b60006020820190508181036000830152610c5881610a0e565b9050919050565b60006020820190508181036000830152610c7881610af4565b9050919050565b6000602082019050610c946000830184610b74565b92915050565b600082825260208201905092915050565b600081905092915050565b6000610cc182610d26565b9150610ccc83610d26565b925082821015610cdf57610cde610d54565b5b828203905092915050565b6000610cf582610d06565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d3b82610d42565b9050919050565b6000610d4d82610d83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160601b9050919050565b610d9981610cea565b8114610da457600080fd5b50565b610db081610d26565b8114610dbb57600080fd5b5056fea264697066735822122040ad775bd168caf447896f5e95cf23b1969694661016698c6265d95d80a9142864736f6c63430008000033a2646970667358221220343f2013056c7d7b12f2d801e7260d6408daa2f55b9efce7c9c7265c9d7d66d964736f6c63430008000033",
  "deployedBytecode": "0x608060405260043610620000bb5760003560e01c806389625494116200006d5780638962549414620001d4578063ad68ebf71462000218578063b2dd5c071462000246578063c0f90f52146200028a578063d677491a14620002d0578063dff17357146200030057620000c3565b806318526a3c14620000c85780631aa3a008146200010c5780632accfc0414620001265780632e1a7d4d14620001565780633a4b66f1146200018457806372b8d470146200019057620000c3565b36620000c357005b600080fd5b348015620000d557600080fd5b50620000f46004803603810190620000ee9190620020d6565b62000330565b60405162000103919062002738565b60405180910390f35b3480156200011957600080fd5b50620001246200037c565b005b3480156200013357600080fd5b506200013e62000553565b6040516200014d919062002738565b60405180910390f35b3480156200016357600080fd5b506200018260048036038101906200017c91906200216f565b620006cc565b005b6200018e62000b61565b005b3480156200019d57600080fd5b50620001bc6004803603810190620001b69190620020d6565b62000fba565b604051620001cb919062002738565b60405180910390f35b348015620001e157600080fd5b50620002006004803603810190620001fa9190620020d6565b62001175565b6040516200020f9190620025c6565b60405180910390f35b3480156200022557600080fd5b506200024460048036038101906200023e91906200212e565b62001246565b005b3480156200025357600080fd5b506200027260048036038101906200026c9190620020d6565b6200177c565b60405162000281919062002610565b60405180910390f35b3480156200029757600080fd5b50620002b66004803603810190620002b09190620020d6565b620017d5565b604051620002c793929190620027af565b60405180910390f35b348015620002dd57600080fd5b50620002e862001a35565b604051620002f7919062002738565b60405180910390f35b3480156200030d57600080fd5b506200031862001b9f565b60405162000327919062002738565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620005515760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000463906200206c565b6200046f9190620025c6565b604051809103906000f0801580156200048c573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a721604051602001620005aa90620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620005de91906200262d565b60206040518083038186803b158015620005f757600080fd5b505afa1580156200060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000632919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa236000546040518263ffffffff1660e01b815260040162000671919062002738565b60206040518083038186803b1580156200068a57600080fd5b505afa1580156200069f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c591906200219b565b9250505090565b80336000821162000714576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070b9062002716565b60405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620007ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007a4906200266c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541162000835576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082c90620026d2565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da215604051602001620008ab919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401620008df91906200262d565b60206040518083038186803b158015620008f857600080fd5b505afa1580156200090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200093391906200219b565b62000a2b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015620009e057600080fd5b505afa158015620009f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1b91906200219b565b4262001ba890919063ffffffff16565b1162000a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a6590620026b0565b60405180910390fd5b600062000a7c853362001bc0565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000ac5573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000b5292919062002782565b60405180910390a25050505050565b6000341162000ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b9e906200264a565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462000d7c5760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000c8e906200206c565b62000c9a9190620025c6565b604051809103906000f08015801562000cb7573d6000803e3d6000fd5b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016020604051808303818588803b15801562000e2957600080fd5b505af115801562000e3e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062000e6591906200219b565b905062000e7e816000546200205490919063ffffffff16565b60008190555062000edb81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200205490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c4468234600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405162000faf93929190620027af565b60405180910390a250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016200101190620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200104591906200262d565b60206040518083038186803b1580156200105e57600080fd5b505afa15801562001073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001099919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162001118919062002738565b60206040518083038186803b1580156200113157600080fd5b505afa15801562001146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116c91906200219b565b92505050919050565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514620011db5760006200123f565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b8033600082116200128e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012859062002716565b60405180910390fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151462001327576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200131e906200266c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411620013af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013a690620026d2565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001425919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200145991906200262d565b60206040518083038186803b1580156200147257600080fd5b505afa15801562001487573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014ad91906200219b565b620015a5600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200155a57600080fd5b505afa1580156200156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200159591906200219b565b4262001ba890919063ffffffff16565b11620015e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015df90620026b0565b60405180910390fd5b6000620015f6853362001bc0565b90508573ffffffffffffffffffffffffffffffffffffffff166345ca631f82336040518363ffffffff1660e01b81526004016200163592919062002755565b600060405180830381600087803b1580156200165057600080fd5b505af115801562001665573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015620016b0573d6000803e3d6000fd5b508573ffffffffffffffffffffffffffffffffffffffff1663b01f0a6b82336040518363ffffffff1660e01b8152600401620016ee92919062002755565b600060405180830381600087803b1580156200170957600080fd5b505af11580156200171e573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a87836040516200176c929190620025e3565b60405180910390a2505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169050919050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f7cb36cfba78818e097a3d983f102f9107317663854a5d185ea320a1e1a7da21560405160200162001851919062002578565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016200188591906200262d565b60206040518083038186803b1580156200189e57600080fd5b505afa158015620018b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018d991906200219b565b905060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146200193f57600062001a24565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a3d7c816040518163ffffffff1660e01b815260040160206040518083038186803b158015620019e857600080fd5b505afa158015620019fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2391906200219b565b5b438294509450945050509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200162001a8c90620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001ac091906200262d565b60206040518083038186803b15801562001ad957600080fd5b505afa15801562001aee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b14919062002102565b90508073ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b5d57600080fd5b505afa15801562001b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b9891906200219b565b9250505090565b60008054905090565b6000818362001bb8919062002865565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200162001c1790620025a2565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040162001c4b91906200262d565b60206040518083038186803b15801562001c6457600080fd5b505afa15801562001c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c9f919062002102565b905060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa23600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b815260040162001d20919062002738565b60206040518083038186803b15801562001d3957600080fd5b505afa15801562001d4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d7491906200219b565b90508086111562001dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001db390620026f4565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e886040518263ffffffff1660e01b815260040162001df9919062002738565b60206040518083038186803b15801562001e1257600080fd5b505afa15801562001e27573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e4d91906200219b565b90506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040162001eee919062002738565b602060405180830381600087803b15801562001f0957600080fd5b505af115801562001f1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f4491906200219b565b90506000811162001f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001f83906200268e565b60405180910390fd5b62001fa38260005462001ba890919063ffffffff16565b6000819055506200200082600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015462001ba890919063ffffffff16565b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550809550505050505092915050565b6000818362002064919062002808565b905092915050565b610f43806200296283390190565b6000813590506200208b816200292d565b92915050565b600081519050620020a2816200292d565b92915050565b600081359050620020b98162002947565b92915050565b600081519050620020d08162002947565b92915050565b600060208284031215620020e957600080fd5b6000620020f9848285016200207a565b91505092915050565b6000602082840312156200211557600080fd5b6000620021258482850162002091565b91505092915050565b600080604083850312156200214257600080fd5b600062002152858286016200207a565b92505060206200216585828601620020a8565b9150509250929050565b6000602082840312156200218257600080fd5b60006200219284828501620020a8565b91505092915050565b600060208284031215620021ae57600080fd5b6000620021be84828501620020bf565b91505092915050565b620021d281620028a0565b82525050565b620021e381620028b4565b82525050565b620021f481620028c0565b82525050565b6200220f6200220982620028c0565b620028f4565b82525050565b600062002224603083620027ec565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006200228c601a83620027fd565b91507f6e6574776f726b2e726574682e6465706f7369742e64656c61790000000000006000830152601a82019050919050565b6000620022ce601a83620027ec565b91507f5374616b6572206e6f742072656769737465726564207965742e0000000000006000830152602082019050919050565b600062002310600f83620027fd565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b600062002352602683620027ec565b91507f4e6f20455448207761732072656365697665642066726f6d207468652072455460008301527f48206275726e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620023ba603c83620027ec565b91507f526f636b657420506f6f6c2077696c6c206e6f74206c657420796f75206d6f7660008301527f65206f7220776974686472617720796f75722072455448207965742e000000006020830152604082019050919050565b600062002422601483620027ec565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b600062002464603283620027ec565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000620024cc601083620027fd565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b60006200250e602183620027ec565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6200257281620028ea565b82525050565b6000620025868284620021fa565b60208201915062002597826200227d565b915081905092915050565b6000620025af82620024bd565b9150620025bc8262002301565b9150819050919050565b6000602082019050620025dd6000830184620021c7565b92915050565b6000604082019050620025fa6000830185620021c7565b62002609602083018462002567565b9392505050565b6000602082019050620026276000830184620021d8565b92915050565b6000602082019050620026446000830184620021e9565b92915050565b60006020820190508181036000830152620026658162002215565b9050919050565b600060208201905081810360008301526200268781620022bf565b9050919050565b60006020820190508181036000830152620026a98162002343565b9050919050565b60006020820190508181036000830152620026cb81620023ab565b9050919050565b60006020820190508181036000830152620026ed8162002413565b9050919050565b600060208201905081810360008301526200270f8162002455565b9050919050565b600060208201905081810360008301526200273181620024ff565b9050919050565b60006020820190506200274f600083018462002567565b92915050565b60006040820190506200276c600083018562002567565b6200277b6020830184620021c7565b9392505050565b600060408201905062002799600083018562002567565b620027a8602083018462002567565b9392505050565b6000606082019050620027c6600083018662002567565b620027d5602083018562002567565b620027e4604083018462002567565b949350505050565b600082825260208201905092915050565b600081905092915050565b60006200281582620028ea565b91506200282283620028ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200285a5762002859620028fe565b5b828201905092915050565b60006200287282620028ea565b91506200287f83620028ea565b925082821015620028955762002894620028fe565b5b828203905092915050565b6000620028ad82620028ca565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6200293881620028a0565b81146200294457600080fd5b50565b6200295281620028ea565b81146200295e57600080fd5b5056fe608060405234801561001057600080fd5b50604051610f43380380610f43833981810160405281019061003291906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100c881610129565b92915050565b6000602082840312156100e057600080fd5b60006100ee848285016100b9565b91505092915050565b600061010282610109565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610132816100f7565b811461013d57600080fd5b50565b610df48061014f6000396000f3fe6080604052600436106100385760003560e01c80632a3d7c811461004457806342966c681461006f578063d0e30db0146100ac5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100ca565b6040516100669190610c7f565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906108e1565b6101a5565b6040516100a39190610c7f565b60405180910390f35b6100b461046e565b6040516100c19190610c7f565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bd02d0f53060405160200161011d9190610b83565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161014f9190610c04565b60206040518083038186803b15801561016757600080fd5b505afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f919061090a565b91505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022e90610c5f565b60405180910390fd5b6000821161027a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027190610c3f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216040516020016102cd90610ba9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016102ff9190610c04565b60206040518083038186803b15801561031757600080fd5b505afa15801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f91906108b8565b905060004790508173ffffffffffffffffffffffffffffffffffffffff166342966c68866040518263ffffffff1660e01b815260040161038f9190610c7f565b602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061090a565b5060006103f7824761086390919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610461573d6000803e3d6000fd5b5080945050505050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610c5f565b60405180910390fd5b60003411610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053a90610c1f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161059690610bc9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105c89190610c04565b60206040518083038186803b1580156105e057600080fd5b505afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061891906108b8565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a72160405160200161064790610ba9565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016106799190610c04565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906108b8565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107069190610be9565b60206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061090a565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107f49190610be9565b60206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610844919061090a565b9050610859828261086390919063ffffffff16565b9550505050505090565b600081836108719190610cb6565b905092915050565b60008151905061088881610d90565b92915050565b60008135905061089d81610da7565b92915050565b6000815190506108b281610da7565b92915050565b6000602082840312156108ca57600080fd5b60006108d884828501610879565b91505092915050565b6000602082840312156108f357600080fd5b60006109018482850161088e565b91505092915050565b60006020828403121561091c57600080fd5b600061092a848285016108a3565b91505092915050565b61093c81610cea565b82525050565b61095361094e82610cea565b610d30565b82525050565b61096281610cfc565b82525050565b6000610975601283610cab565b91507f757365722e6465706f7369742e626c6f636b00000000000000000000000000006000830152601282019050919050565b60006109b5602583610c9a565b91507f4d757374206465706f7369742061206e6f6e2d7a65726f20616d6f756e74206f60008301527f66204554480000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610a1b603083610c9a565b91507f596f75206d757374206275726e2061206e6f6e207a65726f20706f736974697660008301527f6520616d6f756e74206f662072657468000000000000000000000000000000006020830152604082019050919050565b6000610a81600f83610cab565b91507f726f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b6000610ac1601083610cab565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b6000610b01601c83610c9a565b91507f4f6e6c7920526f636b65745374616b652063616e20646f2074686174000000006000830152602082019050919050565b6000610b41601183610cab565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b610b7d81610d26565b82525050565b6000610b8e82610968565b9150610b9a8284610942565b60148201915081905092915050565b6000610bb482610ab4565b9150610bbf82610a74565b9150819050919050565b6000610bd482610ab4565b9150610bdf82610b34565b9150819050919050565b6000602082019050610bfe6000830184610933565b92915050565b6000602082019050610c196000830184610959565b92915050565b60006020820190508181036000830152610c38816109a8565b9050919050565b60006020820190508181036000830152610c5881610a0e565b9050919050565b60006020820190508181036000830152610c7881610af4565b9050919050565b6000602082019050610c946000830184610b74565b92915050565b600082825260208201905092915050565b600081905092915050565b6000610cc182610d26565b9150610ccc83610d26565b925082821015610cdf57610cde610d54565b5b828203905092915050565b6000610cf582610d06565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d3b82610d42565b9050919050565b6000610d4d82610d83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160601b9050919050565b610d9981610cea565b8114610da457600080fd5b50565b610db081610d26565b8114610dbb57600080fd5b5056fea264697066735822122040ad775bd168caf447896f5e95cf23b1969694661016698c6265d95d80a9142864736f6c63430008000033a2646970667358221220343f2013056c7d7b12f2d801e7260d6408daa2f55b9efce7c9c7265c9d7d66d964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1235,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "total_reth_held",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1240,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "stakers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Staker)1233_storage)"
      },
      {
        "astId": 1242,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_storage_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RETHBuyer)1220": {
        "encoding": "inplace",
        "label": "contract RETHBuyer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)1233_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RocketStake.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1233_storage"
      },
      "t_struct(Staker)1233_storage": {
        "encoding": "inplace",
        "label": "struct RocketStake.Staker",
        "members": [
          {
            "astId": 1228,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "reth_buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(RETHBuyer)1220"
          },
          {
            "astId": 1230,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "staked_reth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1232,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}