{
  "address": "0x303C346eeF3128623C147762253B4a3071292647",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enable_manual_rewards",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AccountWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_added_to_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "name": "AddStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "DepositedRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker_address",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_flash_loan_dev_cut",
          "type": "uint256"
        }
      ],
      "name": "UpdatedFlashLoanDevCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_flash_loan_fee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedFlashLoanFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_flash_loan_fee_manager",
          "type": "address"
        }
      ],
      "name": "UpdatedFlashLoanFeeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "storage_key",
          "type": "bytes32"
        }
      ],
      "name": "UpdatedRocketDepositPoolStorageKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rocket_pool_storage_key_manager",
          "type": "address"
        }
      ],
      "name": "UpdatedRocketPoolStorageKeyManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "storage_key",
          "type": "bytes32"
        }
      ],
      "name": "UpdatedRocketRethTokenStorageKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "storage_address",
          "type": "address"
        }
      ],
      "name": "UpdatedRocketStorageAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker_version_contract",
          "type": "address"
        }
      ],
      "name": "UpdatedStakerVersionContract",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLASH_LOAN_CALLBACK_SUCCESS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountStakedETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_eth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "accountStakedRETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked_reth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFlashloanDevFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashBorrower",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanDevCut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dev_cut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanDevFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "flash_loan_manager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanStakerFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRocketPoolStorageKeyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketDepositPoolStorageKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_rocket_deposit_pool_address_storage_key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketRethTokenStorageKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_rocket_reth_token_address_storage_key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_rocket_storage_address",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRETHHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flash_loan_dev_cut",
          "type": "uint256"
        }
      ],
      "name": "updateFlashLoanDevCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flash_loan_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFlashLoanFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flash_loan_fee_manager",
          "type": "address"
        }
      ],
      "name": "updateFlashLoanFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "storage_key",
          "type": "bytes32"
        }
      ],
      "name": "updateRocketDepositPoolStorageKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rocket_pool_storage_key_manager",
          "type": "address"
        }
      ],
      "name": "updateRocketPoolStorageKeyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "storage_key",
          "type": "bytes32"
        }
      ],
      "name": "updateRocketRethTokenStorageKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x16545821da33fe21ac0df3d28f3b07b7a0e774504f0cc5f635d2be4b110d33f2",
  "receipt": {
    "to": null,
    "from": "0xb89282E1Ae6e496a4817298e8bf2E5CbF5a4b770",
    "contractAddress": "0x303C346eeF3128623C147762253B4a3071292647",
    "transactionIndex": 1,
    "gasUsed": "3040371",
    "logsBloom": "0x
    "blockHash": "0x8a69c1d50312133f33095175d7489891786a9c729879a1117000c3efbeb2b425",
    "transactionHash": "0x16545821da33fe21ac0df3d28f3b07b7a0e774504f0cc5f635d2be4b110d33f2",
    "logs": [],
    "blockNumber": 26471622,
    "cumulativeGasUsed": "3157401",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x65Bf360eB12c4FC09e979Bd93C0e9c99d5b2F133",
    true
  ],
  "solcInputHash": "967a9e1be07b999cd16276b763d3777a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable_manual_rewards\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AccountWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_added_to_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"name\":\"AddStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"DepositedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_flash_loan_dev_cut\",\"type\":\"uint256\"}],\"name\":\"UpdatedFlashLoanDevCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_flash_loan_fee\",\"type\":\"uint256\"}],\"name\":\"UpdatedFlashLoanFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_flash_loan_fee_manager\",\"type\":\"address\"}],\"name\":\"UpdatedFlashLoanFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"storage_key\",\"type\":\"bytes32\"}],\"name\":\"UpdatedRocketDepositPoolStorageKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rocket_pool_storage_key_manager\",\"type\":\"address\"}],\"name\":\"UpdatedRocketPoolStorageKeyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"storage_key\",\"type\":\"bytes32\"}],\"name\":\"UpdatedRocketRethTokenStorageKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"storage_address\",\"type\":\"address\"}],\"name\":\"UpdatedRocketStorageAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker_version_contract\",\"type\":\"address\"}],\"name\":\"UpdatedStakerVersionContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_LOAN_CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountStakedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"accountStakedRETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_reth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFlashloanDevFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanDevCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dev_cut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanDevFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"flash_loan_manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanStakerFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRocketPoolStorageKeyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketDepositPoolStorageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rocket_deposit_pool_address_storage_key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketRethTokenStorageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rocket_reth_token_address_storage_key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_storage_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRETHHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flash_loan_dev_cut\",\"type\":\"uint256\"}],\"name\":\"updateFlashLoanDevCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flash_loan_fee\",\"type\":\"uint256\"}],\"name\":\"updateFlashLoanFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flash_loan_fee_manager\",\"type\":\"address\"}],\"name\":\"updateFlashLoanFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"storage_key\",\"type\":\"bytes32\"}],\"name\":\"updateRocketDepositPoolStorageKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocket_pool_storage_key_manager\",\"type\":\"address\"}],\"name\":\"updateRocketPoolStorageKeyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"storage_key\",\"type\":\"bytes32\"}],\"name\":\"updateRocketRethTokenStorageKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"flashFee(address,uint256)\":{\"details\":\"The fee to be charged for a given loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` to be charged for the loan, on top of the returned principal.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Initiate a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"receiver\":\"The receiver of the tokens in the loan, and the receiver of the callback.\",\"token\":\"The loan currency.\"}},\"maxFlashLoan(address)\":{\"details\":\"The amount of currency available to be lent.\",\"params\":{\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` that can be borrowed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketStake.sol\":\"RocketStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './libraries/Counters.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRocketStake.sol';\\nimport './interfaces/IRocketStorage.sol';\\nimport './interfaces/IRocketDepositPool.sol';\\nimport './interfaces/IRocketTokenRETH.sol';\\nimport './interfaces/IFlashLender.sol';\\n\\ncontract RocketStake is IRocketStake, IFlashLender {\\n    using SafeMath for uint256;\\n\\n    struct Staker {\\n        uint256 flash_loan_fee_entitlement_floor;\\n        uint256 staked_reth;\\n        bool exists;\\n    }\\n\\n    mapping(address => Staker) internal stakers;\\n    bool enable_manual_rewards;\\n    \\n    address rocket_pool_storage_key_manager;\\n    address rocket_storage_address;\\n    bytes32 rocket_deposit_pool_address_storage_key = keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketDepositPool\\\"));\\n    bytes32 rocket_reth_token_address_storage_key = keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"RocketTokenRETH\\\"));\\n\\n    address flash_loan_fee_manager;\\n    uint256 flash_loan_fee = 5000; // = .05%\\n    uint256 flash_loan_dev_cut = 500; // = 50% \\n    uint256 flash_loan_dev_fees = 0;\\n    uint256 flash_loan_staker_fees = 0;\\n    bytes32 public constant FLASH_LOAN_CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    constructor(\\n        address _rocket_storage_address,\\n        bool _enable_manual_rewards\\n    ) {\\n        rocket_storage_address = _rocket_storage_address;\\n        rocket_pool_storage_key_manager = msg.sender;\\n        flash_loan_fee_manager = msg.sender;\\n        enable_manual_rewards = _enable_manual_rewards;\\n    }\\n\\n    receive() external payable {}\\n\\n    /* Makes it possible to change the RP storage key if possible. Set manager address(0) to lock */\\n\\n    function updateRocketPoolStorageKeyManager(address _rocket_pool_storage_key_manager) external override {\\n        require(msg.sender == rocket_pool_storage_key_manager, \\\"You must be a key manager\\\");\\n        rocket_pool_storage_key_manager = _rocket_pool_storage_key_manager;\\n        emit UpdatedRocketPoolStorageKeyManager(_rocket_pool_storage_key_manager);\\n    }\\n    function updateRocketDepositPoolStorageKey(bytes32 storage_key) external override {\\n        require(msg.sender == rocket_pool_storage_key_manager, \\\"You must be a key manager\\\");\\n        rocket_deposit_pool_address_storage_key = storage_key;\\n        emit UpdatedRocketDepositPoolStorageKey(storage_key);\\n    }\\n    function updateRocketRethTokenStorageKey(bytes32 storage_key) external override {\\n        require(msg.sender == rocket_pool_storage_key_manager, \\\"You must be a key manager\\\");\\n        rocket_reth_token_address_storage_key = storage_key;\\n        emit UpdatedRocketRethTokenStorageKey(storage_key);\\n    }\\n    function getRocketPoolStorageKeyManager() external override view returns(address _guardian) {\\n        return(rocket_pool_storage_key_manager);\\n    }\\n    function rocketStorageAddress() external override view returns(address _rocket_storage_address) {\\n        return(rocket_storage_address);\\n    }\\n    function rocketDepositPoolStorageKey() external override view returns(bytes32 _rocket_deposit_pool_address_storage_key) {\\n        return(rocket_deposit_pool_address_storage_key);\\n    }\\n    function rocketRethTokenStorageKey() external override view returns(bytes32 _rocket_reth_token_address_storage_key) {\\n        return(rocket_reth_token_address_storage_key);\\n    }\\n\\n    /* Main staker functions */\\n\\n    function distributeRewards() external payable override {\\n        require(enable_manual_rewards, 'Cannot deposit rewards manually.');\\n        _rethContract().distributeRewards{ value: msg.value }();\\n        emit DepositedRewards(msg.sender, msg.value);\\n    }\\n    function stake() external payable override {\\n        require(msg.value > 0, \\\"You must send a non-zero amount of eth to stake.\\\");\\n\\n        // setup staker\\n        if (stakers[msg.sender].exists != true) {\\n            stakers[msg.sender].exists = true;\\n            emit Register(msg.sender);\\n        }\\n\\n        // setup RP contracts\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketDepositPool rocket_deposit_pool = IRocketDepositPool(rocket_storage.getAddress(rocket_deposit_pool_address_storage_key));\\n        IRocketTokenRETH rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(rocket_reth_token_address_storage_key));\\n\\n        // deposit eth into RP and calculate the amount of rETH  added to this contract's balance\\n        uint256 reth_supply_before = rocket_token_reth.balanceOf(address(this));\\n        rocket_deposit_pool.deposit{ value: msg.value }();\\n        uint256 reth_supply_after = rocket_token_reth.balanceOf(address(this));\\n        uint256 reth_added_to_stake = reth_supply_after.sub(reth_supply_before);\\n\\n        // update staker's balance\\n        uint256 original_staked_reth = stakers[msg.sender].staked_reth;\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(reth_added_to_stake);\\n\\n        // an abstract way to calc the amount of the total fees accumulated that a staker is entitled to\\n        stakers[msg.sender].flash_loan_fee_entitlement_floor = _calcNextFlashLoanFeeEntitlementFloor(\\n            flash_loan_staker_fees,\\n            stakers[msg.sender].flash_loan_fee_entitlement_floor,\\n            stakers[msg.sender].staked_reth,\\n            original_staked_reth\\n        );\\n        emit AddStake(msg.sender, reth_added_to_stake, msg.value, stakers[msg.sender].staked_reth);\\n    }\\n    function withdraw(uint256 eth_amount) external override {\\n        require(stakers[msg.sender].exists == true, \\\"Nothing staked here.\\\");\\n        require(eth_amount > 0, \\\"You must withdraw more than 0 ETH\\\");\\n        \\n        // setup RP contracts\\n        IRocketTokenRETH rocket_token_reth = _rethContract();\\n        \\n        // ensure there is enough eth available in RP's system\\n        require(rocket_token_reth.getTotalCollateral() >= eth_amount, \\\"Not enough collateral available in Rocket Pool\\\");\\n\\n        // credit the staker with the rETH earned from flashloan fees\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.add(_flashLoanRETHShare(msg.sender));\\n\\n        // make sure we're not trying to withdraw more ETH than our rETH share is worth\\n        uint256 eth_able_to_be_withdrawn = rocket_token_reth.getEthValue(stakers[msg.sender].staked_reth);\\n        require(eth_amount <= eth_able_to_be_withdrawn, \\\"You cannot withdraw more ETH than you have staked.\\\");\\n\\n        // burn the rETH to receive ETH via RP\\n        uint256 reth_to_burn = rocket_token_reth.getRethValue(eth_amount);\\n        uint256 starting_balance = address(this).balance;\\n        rocket_token_reth.burn(reth_to_burn);\\n        uint256 eth_received = address(this).balance.sub(starting_balance);\\n\\n        // deduct the burned rETH from the stakers balance\\n        stakers[msg.sender].staked_reth = stakers[msg.sender].staked_reth.sub(reth_to_burn);\\n\\n        // since we credited the staker's share of the fees already via _flashLoanRETHShare above, \\n        // we can set the flash_loan_fee_entitlement_floor to the exact amount of fees in the system now\\n        // ensures that our staker is not over-credited with rETH\\n        stakers[msg.sender].flash_loan_fee_entitlement_floor = 0;\\n\\n        // transfer staker ETH last to prevent re-entrancy\\n        payable(msg.sender).transfer(eth_received);\\n        emit AccountWithdraw(msg.sender, eth_received, stakers[msg.sender].staked_reth);\\n    }\\n    function accountStakedRETH(address staker) override public view returns(uint256 staked_reth) {\\n        return(\\n            stakers[staker].staked_reth.add(_flashLoanRETHShare(staker))\\n        );\\n    }\\n    function accountStakedETH(address staker) override public view returns(uint256 staked_eth) {\\n        return _rethContract().getEthValue(accountStakedRETH(staker));\\n    }\\n    function totalRETHCollateral() external override view returns(uint256 collateral) {\\n        return _rethContract().getTotalCollateral();\\n    }\\n    function totalRETHHeld() external override view returns(uint256 collateral) {\\n        return _rethContract().balanceOf(address(this));\\n    }\\n\\n    /* Flash loan related */\\n\\n    function updateFlashLoanFeeManager(address _flash_loan_fee_manager) external override {\\n        require(msg.sender == flash_loan_fee_manager, \\\"Invalid permission\\\");\\n        flash_loan_fee_manager = _flash_loan_fee_manager;\\n        emit UpdatedFlashLoanFeeManager(_flash_loan_fee_manager);\\n    }\\n    function updateFlashLoanDevCut(uint256 _flash_loan_dev_cut) external override {\\n        require(msg.sender == flash_loan_fee_manager, \\\"Invalid permission\\\");\\n        flash_loan_dev_cut = _flash_loan_dev_cut;\\n        emit UpdatedFlashLoanDevCut(_flash_loan_dev_cut);\\n    }\\n    function updateFlashLoanFee(uint256 _flash_loan_fee) external override {\\n        require(msg.sender == flash_loan_fee_manager, \\\"Invalid permission\\\");\\n        flash_loan_fee = _flash_loan_fee;\\n        emit UpdatedFlashLoanFee(_flash_loan_fee);\\n    }\\n    function flashLoan(\\n        IFlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override returns(bool) {\\n        require(address(_rethContract()) == token, 'FlashLender: Unsupported currency');\\n        uint256 fee = amount.mul(flash_loan_fee).div(10000000);\\n        require(IERC20(token).transfer(address(receiver), amount), 'FlashLender: Transfer failed');\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) == FLASH_LOAN_CALLBACK_SUCCESS, \\n            'FlashLender: Callback failed'\\n        );\\n        require(\\n            IERC20(token).transferFrom(address(receiver), address(this), amount.add(fee)),\\n            \\\"FlashLender: Repay failed\\\"\\n        );\\n        uint256 dev_cut = fee.mul(flash_loan_dev_cut).div(1000);\\n        flash_loan_dev_fees = flash_loan_dev_fees.add(dev_cut);\\n        flash_loan_staker_fees = flash_loan_staker_fees.add(fee.sub(dev_cut));\\n        return true;\\n    }\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view override returns(uint256) {\\n        require(\\n            address(_rethContract()) == token,\\n            \\\"FlashLender: Unsupported currency\\\"\\n        );\\n        return amount.mul(flash_loan_fee).div(10000000);\\n    }\\n    function maxFlashLoan(\\n        address token\\n    ) external view override returns (uint256) {\\n        return token == address(_rethContract()) \\n            ? IERC20(token).balanceOf(address(this)) \\n            : 0;\\n    }\\n    function claimFlashloanDevFees() external override {\\n        require(msg.sender == flash_loan_fee_manager, \\\"Invalid permission\\\");\\n        uint256 rETH_to_claim = flash_loan_dev_fees;\\n        flash_loan_dev_fees = 0;\\n        _rethContract().transfer(flash_loan_fee_manager, rETH_to_claim);\\n    }\\n    function flashLoanDevFeesTotal() external view override returns(uint256 rETH) {\\n        return flash_loan_dev_fees;\\n    }\\n    function flashLoanStakerFeesTotal() external view override returns(uint256 rETH) {\\n        return flash_loan_staker_fees;\\n    }\\n    function flashLoanFee() external view override returns(uint256 fee) {\\n        return flash_loan_fee;\\n    }\\n    function flashLoanDevCut() external view override returns(uint256 dev_cut) {\\n        return flash_loan_dev_cut;\\n    }\\n    function flashLoanManager() external view override returns(address flash_loan_manager) {\\n        return flash_loan_fee_manager;\\n    }\\n\\n    /* Helper functions */\\n\\n    function _flashLoanRETHShare(address staker) internal view returns(uint256) {\\n        if (stakers[staker].exists != true) {\\n            return 0;\\n        }\\n        uint256 balance_of_reth = _rethContract().balanceOf(address(this));\\n        if (balance_of_reth == 0) {\\n            return 0;\\n        }\\n        return stakers[staker].staked_reth\\n            .mul(flash_loan_staker_fees.sub(stakers[staker].flash_loan_fee_entitlement_floor))\\n            .div(balance_of_reth);\\n    }\\n    // secret sauce to safely redistribute flash loan fees to stakers\\n    function _calcNextFlashLoanFeeEntitlementFloor(\\n        uint256 previous_entitlement_floor,\\n        uint256 fee_total,\\n        uint256 staker_reth_n_current,\\n        uint256 staker_reth_n_previous\\n    ) internal pure returns(uint256) {\\n        if (staker_reth_n_current == 0) {\\n            return fee_total;\\n        }\\n        if (staker_reth_n_previous == 0) {\\n            return fee_total;\\n        }\\n        return fee_total.sub(\\n            (\\n                fee_total\\n                    .mul(staker_reth_n_previous)\\n                    .div(staker_reth_n_current)\\n            )\\n                .sub(\\n                    previous_entitlement_floor\\n                        .mul(staker_reth_n_previous)\\n                        .div(staker_reth_n_current)\\n                )\\n        );\\n    }\\n    function _rethContract() internal view returns(IRocketTokenRETH rocket_token_reth) {\\n        IRocketStorage rocket_storage = IRocketStorage(rocket_storage_address);\\n        IRocketTokenRETH _rocket_token_reth = IRocketTokenRETH(rocket_storage.getAddress(rocket_reth_token_address_storage_key));\\n        return _rocket_token_reth;\\n    }\\n}\",\"keccak256\":\"0x5c7fda88109c7ffd9124c3073033e0a15c5cf11768e87d225e968a3179a58c9b\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x5bbe210d3ee7f8913d5ab8cc3543f6b073e085f7e234632861d5e5ae99cf0712\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IFlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\",\"keccak256\":\"0x2508dbb9623f0e9958121bd31670086c0d381a3de856d26443fd60839a41dbb5\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IFlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport './IFlashBorrower.sol';\\n\\ninterface IFlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IFlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xe646e328d9163cfbe2c1e0f78e5b4906a7fbbe3e510b112bdc8a7ea6f1f317e3\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketDepositPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketDepositPool {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xb5bd33ff314d42c78c158ba13089d59e460f059acfa340f670caf01cef9b59ca\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStake.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStake {\\n    function claimFlashloanDevFees() external;\\n    function updateFlashLoanFeeManager(address _flash_loan_fee_manager) external;\\n    function updateFlashLoanDevCut(uint256 _flash_loan_dev_cut) external;\\n    function updateFlashLoanFee(uint256 _flash_loan_fee) external;\\n    function updateRocketPoolStorageKeyManager(address _rocket_pool_storage_key_manager) external;\\n    function updateRocketDepositPoolStorageKey(bytes32 storage_key) external;\\n    function updateRocketRethTokenStorageKey(bytes32 storage_key) external;\\n    function distributeRewards() payable external;\\n    function stake() external payable; \\n    function withdraw(uint256 eth_amount) external;\\n    function totalRETHCollateral() external view returns(uint256);\\n    function totalRETHHeld() external view returns(uint256);\\n    function getRocketPoolStorageKeyManager() external view returns(address);\\n    function flashLoanDevFeesTotal() external view returns(uint256 reth);\\n    function flashLoanStakerFeesTotal() external view returns(uint256 reth);\\n    function flashLoanFee() external view returns(uint256 fee);\\n    function flashLoanDevCut() external view returns(uint256 dev_cut);\\n    function flashLoanManager() external view returns(address flash_loan_manager);\\n    function rocketStorageAddress() external view returns(address);\\n    function rocketDepositPoolStorageKey() external view returns(bytes32);\\n    function rocketRethTokenStorageKey() external view returns(bytes32);\\n    function accountStakedRETH(address staker) external view returns(uint256 staked_reth);\\n    function accountStakedETH(address staker) external view returns(uint256 eth_amount);\\n\\n    event UpdatedFlashLoanFeeManager(address indexed _flash_loan_fee_manager);\\n    event UpdatedFlashLoanDevCut(uint256 _flash_loan_dev_cut);\\n    event UpdatedFlashLoanFee(uint256 _flash_loan_fee);\\n    event UpdatedStakerVersionContract(address _staker_version_contract);\\n    event Register(address indexed staker_address);\\n    event AddStake(address indexed staker_address, uint256 reth_added_to_stake, uint256 eth_added_to_stake, uint256 staked_reth);\\n    event AccountWithdraw(address indexed staker_address, uint256 withdrawn_eth, uint256 staked_reth);\\n    event UpdatedRocketPoolStorageKeyManager(address rocket_pool_storage_key_manager);\\n    event UpdatedRocketStorageAddress(address storage_address);\\n    event UpdatedRocketDepositPoolStorageKey(bytes32 storage_key);\\n    event UpdatedRocketRethTokenStorageKey(bytes32 storage_key);\\n    event DepositedRewards(address depositor, uint256 rewards);\\n}\",\"keccak256\":\"0x9e5bdf5262ec2421217adedeb522cd9f00f71a94585b4803cae98780f373ded5\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IRocketStorage {\\n    function getAddress(bytes32 _key) external view returns (address);\\n}\",\"keccak256\":\"0x857e9f152d75e925d3095c1b6bc6acb220c8b735f6df06a421012bb28a3e1b4e\",\"license\":\"AGPL-1.0\"},\"contracts/interfaces/IRocketTokenRETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/IERC20.sol';\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n    function distributeRewards() payable external;\\n    function getTotalCollateral() external view returns (uint256);\\n    function burn(uint256 _rethAmount) external returns (uint256);\\n}\",\"keccak256\":\"0x4104ac5b3685a5f02b9dbe3c036cf985ac5c19f23c67bcb3150f11199a63410d\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x28482f213b4aabbe37903f331f1f240271d5cc3bc7a2c20fc3cdf0e4380d7788\",\"license\":\"AGPL-1.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0x49990db7278b36c87d44c53dc2a9f306d5304a35a4e3add09305dbc844af920b\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040526040516020016200001590620002de565b604051602081830303815290604052805190602001206003556040516020016200003f90620002ba565b604051602081830303815290604052805190602001206004556113886006556101f4600755600060085560006009553480156200007b57600080fd5b506040516200369f3803806200369f8339818101604052810190620000a19190620001b3565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548160ff021916908315150217905550505062000381565b60008151905062000196816200034d565b92915050565b600081519050620001ad8162000367565b92915050565b60008060408385031215620001c757600080fd5b6000620001d78582860162000185565b9250506020620001ea858286016200019c565b9150509250929050565b60006200020360108362000302565b91507f636f6e74726163742e61646472657373000000000000000000000000000000006000830152601082019050919050565b600062000245600f8362000302565b91507f526f636b6574546f6b656e5245544800000000000000000000000000000000006000830152600f82019050919050565b60006200028760118362000302565b91507f726f636b65744465706f736974506f6f6c0000000000000000000000000000006000830152601182019050919050565b6000620002c782620001f4565b9150620002d48262000236565b9150819050919050565b6000620002eb82620001f4565b9150620002f88262000278565b9150819050919050565b600081905092915050565b60006200031a826200032d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b62000358816200030d565b81146200036457600080fd5b50565b620003728162000321565b81146200037e57600080fd5b50565b61330e80620003916000396000f3fe60806040526004361061019f5760003560e01c80637342f1f8116100ec578063d9d98ce41161008a578063e50d058e11610064578063e50d058e14610594578063e56cbf1c146105bd578063e62f1f7c146105d4578063ed67d8c1146105ff576101a6565b8063d9d98ce414610501578063df58358f1461053e578063dff1735714610569576101a6565b8063ab442828116100c6578063ab44282814610447578063b01c848614610484578063b5654656146104af578063d8566874146104d8576101a6565b80637342f1f8146103c857806375d9ad1b146103f15780637ab5768a1461041c576101a6565b80633a4b66f1116101595780635c4fdfba116101335780635c4fdfba1461031b5780635cffe9de14610344578063613255ab146103815780636f4a2cd0146103be576101a6565b80633a4b66f1146102bb57806346d97e9e146102c55780634847cdc8146102f0576101a6565b80626fde85146101ab57806306f27a67146101d457806310cbe692146101ff57806314337cb51461023c5780632e1a7d4d146102675780632ff6461014610290576101a6565b366101a657005b600080fd5b3480156101b757600080fd5b506101d260048036038101906101cd9190612742565b61062a565b005b3480156101e057600080fd5b506101e9610741565b6040516101f69190612e36565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190612742565b61074b565b6040516102339190612fd1565b60405180910390f35b34801561024857600080fd5b506102516107b0565b60405161025e9190612d44565b60405180910390f35b34801561027357600080fd5b5061028e600480360381019061028991906128cb565b6107d8565b005b34801561029c57600080fd5b506102a5610e23565b6040516102b29190612e36565b60405180910390f35b6102c3610e2d565b005b3480156102d157600080fd5b506102da61148f565b6040516102e79190612fd1565b60405180910390f35b3480156102fc57600080fd5b50610305611499565b6040516103129190612fd1565b60405180910390f35b34801561032757600080fd5b50610342600480360381019061033d9190612742565b6114a3565b005b34801561035057600080fd5b5061036b6004803603810190610366919061284b565b6115ab565b6040516103789190612e1b565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190612742565b611976565b6040516103b59190612fd1565b60405180910390f35b6103c6611a4a565b005b3480156103d457600080fd5b506103ef60048036038101906103ea91906127f9565b611b3c565b005b3480156103fd57600080fd5b50610406611c0b565b6040516104139190612e36565b60405180910390f35b34801561042857600080fd5b50610431611c2f565b60405161043e9190612d44565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612742565b611c59565b60405161047b9190612fd1565b60405180910390f35b34801561049057600080fd5b50610499611cfa565b6040516104a69190612d44565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d191906128cb565b611d24565b005b3480156104e457600080fd5b506104ff60048036038101906104fa91906128cb565b611df5565b005b34801561050d57600080fd5b5061052860048036038101906105239190612794565b611ec6565b6040516105359190612fd1565b60405180910390f35b34801561054a57600080fd5b50610553611f6f565b6040516105609190612fd1565b60405180910390f35b34801561057557600080fd5b5061057e611ffb565b60405161058b9190612fd1565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b691906127f9565b612092565b005b3480156105c957600080fd5b506105d2612161565b005b3480156105e057600080fd5b506105e96122ba565b6040516105f69190612fd1565b60405180910390f35b34801561060b57600080fd5b506106146122c4565b6040516106219190612fd1565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190612f91565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f423be4371be317774907e71b8ade0ef37db8e61ba49762d5aa18ac368ab399ce60405160405180910390a250565b6000600454905090565b60006107a9610759836122ce565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b9050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151461086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490612f31565b60405180910390fd5b600081116108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a790612fb1565b60405180910390fd5b60006108ba6124b4565b9050818173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b91906128f4565b101561097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390612ed1565b60405180910390fd5b6109d8610988336122ce565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401610a999190612fd1565b60206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906128f4565b905080831115610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2590612f51565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e856040518263ffffffff1660e01b8152600401610b699190612fd1565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb991906128f4565b905060004790508373ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b8152600401610bf99190612fd1565b602060405180830381600087803b158015610c1357600080fd5b505af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906128f4565b506000610c61824761257390919063ffffffff16565b9050610cb7836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461257390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d89573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d8826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051610e13929190612fec565b60405180910390a2505050505050565b6000600354905090565b60003411610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6790612e51565b60405180910390fd5b600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610f685760016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216003546040518263ffffffff1660e01b8152600401610fcc9190612e36565b60206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061276b565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a7216004546040518263ffffffff1660e01b815260040161105b9190612e36565b60206040518083038186803b15801561107357600080fd5b505afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab919061276b565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110e89190612d44565b60206040518083038186803b15801561110057600080fd5b505afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113891906128f4565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111d69190612d44565b60206040518083038186803b1580156111ee57600080fd5b505afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122691906128f4565b9050600061123d838361257390919063ffffffff16565b905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506112d9826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506113ae6009546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015484612589565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec83346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405161147e93929190613015565b60405180910390a250505050505050565b6000600954905090565b6000600654905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152890612e71565b60405180910390fd5b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff5f288d38a0ed55af225423bee9548aa468ab6dea83b52ad20bcf3ac5dab8f99816040516115a09190612d44565b60405180910390a150565b60008473ffffffffffffffffffffffffffffffffffffffff166115cc6124b4565b73ffffffffffffffffffffffffffffffffffffffff1614611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161990612e91565b60405180910390fd5b600061164e629896806116406006548861262490919063ffffffff16565b61263a90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff1660e01b815260040161168b929190612df2565b602060405180830381600087803b1580156116a557600080fd5b505af11580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906127d0565b61171c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171390612f71565b60405180910390fd5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98773ffffffffffffffffffffffffffffffffffffffff166323e30c8b338989868a8a6040518763ffffffff1660e01b815260040161178096959493929190612d96565b602060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d29190612822565b14611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990612ef1565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd8830611843858a61249e90919063ffffffff16565b6040518463ffffffff1660e01b815260040161186193929190612d5f565b602060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b391906127d0565b6118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e990612f11565b60405180910390fd5b600061191d6103e861190f6007548561262490919063ffffffff16565b61263a90919063ffffffff16565b90506119348160085461249e90919063ffffffff16565b600881905550611961611950828461257390919063ffffffff16565b60095461249e90919063ffffffff16565b60098190555060019250505095945050505050565b60006119806124b4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146119b9576000611a43565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119f29190612d44565b60206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4291906128f4565b5b9050919050565b600160009054906101000a900460ff16611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612eb1565b60405180910390fd5b611aa16124b4565b73ffffffffffffffffffffffffffffffffffffffff16636f4a2cd0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ae857600080fd5b505af1158015611afc573d6000803e3d6000fd5b50505050507f1af28763becf183648e30b61aaed9abcc7ca1d3a5df4f6262eb7017c8aa0ee8f3334604051611b32929190612df2565b60405180910390a1565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc190612e71565b60405180910390fd5b806004819055507f6b878384df46dc11858764f1f9c6cc4c3a36c9bf274b94dec32e34ff184b8a0e81604051611c009190612e36565b60405180910390a150565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611c636124b4565b73ffffffffffffffffffffffffffffffffffffffff16638b32fa23611c878461074b565b6040518263ffffffff1660e01b8152600401611ca39190612fd1565b60206040518083038186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf391906128f4565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90612f91565b60405180910390fd5b806007819055507f5661f12da4a79b3526fc7ae1f14502abaf15eb53edc7ff7dd8bd0551899684b981604051611dea9190612fd1565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7c90612f91565b60405180910390fd5b806006819055507f23428688d5098d154855838834462604dabd11d308ae787f18d5ad5843231d0981604051611ebb9190612fd1565b60405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff16611ee76124b4565b73ffffffffffffffffffffffffffffffffffffffff1614611f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3490612e91565b60405180910390fd5b611f6762989680611f596006548561262490919063ffffffff16565b61263a90919063ffffffff16565b905092915050565b6000611f796124b4565b73ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611fbe57600080fd5b505afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff691906128f4565b905090565b60006120056124b4565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161203d9190612d44565b60206040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208d91906128f4565b905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211790612e71565b60405180910390fd5b806003819055507fac5571d3d68f716a90b62e1650ea8962eece2a46bd06ec284f96bbc9ad94e0ae816040516121569190612e36565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e890612f91565b60405180910390fd5b6000600854905060006008819055506122086124b4565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612264929190612df2565b602060405180830381600087803b15801561227e57600080fd5b505af1158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b691906127d0565b5050565b6000600854905090565b6000600754905090565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146123335760009050612499565b600061233d6124b4565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123759190612d44565b60206040518083038186803b15801561238d57600080fd5b505afa1580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c591906128f4565b905060008114156123da576000915050612499565b612495816124876124376000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460095461257390919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461262490919063ffffffff16565b61263a90919063ffffffff16565b9150505b919050565b600081836124ac919061306e565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216004546040518263ffffffff1660e01b81526004016125199190612e36565b60206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612569919061276b565b9050809250505090565b60008183612581919061314f565b905092915050565b60008083141561259b5783905061261c565b60008214156125ac5783905061261c565b61261961260a6125d7856125c9868a61262490919063ffffffff16565b61263a90919063ffffffff16565b6125fc866125ee878a61262490919063ffffffff16565b61263a90919063ffffffff16565b61257390919063ffffffff16565b8561257390919063ffffffff16565b90505b949350505050565b6000818361263291906130f5565b905092915050565b6000818361264891906130c4565b905092915050565b60008135905061265f81613265565b92915050565b60008151905061267481613265565b92915050565b6000815190506126898161327c565b92915050565b60008135905061269e81613293565b92915050565b6000815190506126b381613293565b92915050565b60008083601f8401126126cb57600080fd5b8235905067ffffffffffffffff8111156126e457600080fd5b6020830191508360018202830111156126fc57600080fd5b9250929050565b600081359050612712816132aa565b92915050565b600081359050612727816132c1565b92915050565b60008151905061273c816132c1565b92915050565b60006020828403121561275457600080fd5b600061276284828501612650565b91505092915050565b60006020828403121561277d57600080fd5b600061278b84828501612665565b91505092915050565b600080604083850312156127a757600080fd5b60006127b585828601612650565b92505060206127c685828601612718565b9150509250929050565b6000602082840312156127e257600080fd5b60006127f08482850161267a565b91505092915050565b60006020828403121561280b57600080fd5b60006128198482850161268f565b91505092915050565b60006020828403121561283457600080fd5b6000612842848285016126a4565b91505092915050565b60008060008060006080868803121561286357600080fd5b600061287188828901612703565b955050602061288288828901612650565b945050604061289388828901612718565b935050606086013567ffffffffffffffff8111156128b057600080fd5b6128bc888289016126b9565b92509250509295509295909350565b6000602082840312156128dd57600080fd5b60006128eb84828501612718565b91505092915050565b60006020828403121561290657600080fd5b60006129148482850161272d565b91505092915050565b61292681613183565b82525050565b61293581613195565b82525050565b612944816131a1565b82525050565b6000612956838561304c565b93506129638385846131e7565b61296c83613254565b840190509392505050565b600061298460308361305d565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006129ea60198361305d565b91507f596f75206d7573742062652061206b6579206d616e61676572000000000000006000830152602082019050919050565b6000612a2a60218361305d565b91507f466c6173684c656e6465723a20556e737570706f727465642063757272656e6360008301527f79000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a9060208361305d565b91507f43616e6e6f74206465706f7369742072657761726473206d616e75616c6c792e6000830152602082019050919050565b6000612ad0602e8361305d565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b6000612b36601c8361305d565b91507f466c6173684c656e6465723a2043616c6c6261636b206661696c6564000000006000830152602082019050919050565b6000612b7660198361305d565b91507f466c6173684c656e6465723a205265706179206661696c6564000000000000006000830152602082019050919050565b6000612bb660148361305d565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b6000612bf660328361305d565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000612c5c601c8361305d565b91507f466c6173684c656e6465723a205472616e73666572206661696c6564000000006000830152602082019050919050565b6000612c9c60128361305d565b91507f496e76616c6964207065726d697373696f6e00000000000000000000000000006000830152602082019050919050565b6000612cdc60218361305d565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b612d3e816131dd565b82525050565b6000602082019050612d59600083018461291d565b92915050565b6000606082019050612d74600083018661291d565b612d81602083018561291d565b612d8e6040830184612d35565b949350505050565b600060a082019050612dab600083018961291d565b612db8602083018861291d565b612dc56040830187612d35565b612dd26060830186612d35565b8181036080830152612de581848661294a565b9050979650505050505050565b6000604082019050612e07600083018561291d565b612e146020830184612d35565b9392505050565b6000602082019050612e30600083018461292c565b92915050565b6000602082019050612e4b600083018461293b565b92915050565b60006020820190508181036000830152612e6a81612977565b9050919050565b60006020820190508181036000830152612e8a816129dd565b9050919050565b60006020820190508181036000830152612eaa81612a1d565b9050919050565b60006020820190508181036000830152612eca81612a83565b9050919050565b60006020820190508181036000830152612eea81612ac3565b9050919050565b60006020820190508181036000830152612f0a81612b29565b9050919050565b60006020820190508181036000830152612f2a81612b69565b9050919050565b60006020820190508181036000830152612f4a81612ba9565b9050919050565b60006020820190508181036000830152612f6a81612be9565b9050919050565b60006020820190508181036000830152612f8a81612c4f565b9050919050565b60006020820190508181036000830152612faa81612c8f565b9050919050565b60006020820190508181036000830152612fca81612ccf565b9050919050565b6000602082019050612fe66000830184612d35565b92915050565b60006040820190506130016000830185612d35565b61300e6020830184612d35565b9392505050565b600060608201905061302a6000830186612d35565b6130376020830185612d35565b6130446040830184612d35565b949350505050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613079826131dd565b9150613084836131dd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130b9576130b86131f6565b5b828201905092915050565b60006130cf826131dd565b91506130da836131dd565b9250826130ea576130e9613225565b5b828204905092915050565b6000613100826131dd565b915061310b836131dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613144576131436131f6565b5b828202905092915050565b600061315a826131dd565b9150613165836131dd565b925082821015613178576131776131f6565b5b828203905092915050565b600061318e826131bd565b9050919050565b60008115159050919050565b6000819050919050565b60006131b682613183565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b61326e81613183565b811461327957600080fd5b50565b61328581613195565b811461329057600080fd5b50565b61329c816131a1565b81146132a757600080fd5b50565b6132b3816131ab565b81146132be57600080fd5b50565b6132ca816131dd565b81146132d557600080fd5b5056fea2646970667358221220e383332a1451936b475e760da857e4c15c68fea676c894944b0b2ba149fc522264736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061019f5760003560e01c80637342f1f8116100ec578063d9d98ce41161008a578063e50d058e11610064578063e50d058e14610594578063e56cbf1c146105bd578063e62f1f7c146105d4578063ed67d8c1146105ff576101a6565b8063d9d98ce414610501578063df58358f1461053e578063dff1735714610569576101a6565b8063ab442828116100c6578063ab44282814610447578063b01c848614610484578063b5654656146104af578063d8566874146104d8576101a6565b80637342f1f8146103c857806375d9ad1b146103f15780637ab5768a1461041c576101a6565b80633a4b66f1116101595780635c4fdfba116101335780635c4fdfba1461031b5780635cffe9de14610344578063613255ab146103815780636f4a2cd0146103be576101a6565b80633a4b66f1146102bb57806346d97e9e146102c55780634847cdc8146102f0576101a6565b80626fde85146101ab57806306f27a67146101d457806310cbe692146101ff57806314337cb51461023c5780632e1a7d4d146102675780632ff6461014610290576101a6565b366101a657005b600080fd5b3480156101b757600080fd5b506101d260048036038101906101cd9190612742565b61062a565b005b3480156101e057600080fd5b506101e9610741565b6040516101f69190612e36565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190612742565b61074b565b6040516102339190612fd1565b60405180910390f35b34801561024857600080fd5b506102516107b0565b60405161025e9190612d44565b60405180910390f35b34801561027357600080fd5b5061028e600480360381019061028991906128cb565b6107d8565b005b34801561029c57600080fd5b506102a5610e23565b6040516102b29190612e36565b60405180910390f35b6102c3610e2d565b005b3480156102d157600080fd5b506102da61148f565b6040516102e79190612fd1565b60405180910390f35b3480156102fc57600080fd5b50610305611499565b6040516103129190612fd1565b60405180910390f35b34801561032757600080fd5b50610342600480360381019061033d9190612742565b6114a3565b005b34801561035057600080fd5b5061036b6004803603810190610366919061284b565b6115ab565b6040516103789190612e1b565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190612742565b611976565b6040516103b59190612fd1565b60405180910390f35b6103c6611a4a565b005b3480156103d457600080fd5b506103ef60048036038101906103ea91906127f9565b611b3c565b005b3480156103fd57600080fd5b50610406611c0b565b6040516104139190612e36565b60405180910390f35b34801561042857600080fd5b50610431611c2f565b60405161043e9190612d44565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612742565b611c59565b60405161047b9190612fd1565b60405180910390f35b34801561049057600080fd5b50610499611cfa565b6040516104a69190612d44565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d191906128cb565b611d24565b005b3480156104e457600080fd5b506104ff60048036038101906104fa91906128cb565b611df5565b005b34801561050d57600080fd5b5061052860048036038101906105239190612794565b611ec6565b6040516105359190612fd1565b60405180910390f35b34801561054a57600080fd5b50610553611f6f565b6040516105609190612fd1565b60405180910390f35b34801561057557600080fd5b5061057e611ffb565b60405161058b9190612fd1565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b691906127f9565b612092565b005b3480156105c957600080fd5b506105d2612161565b005b3480156105e057600080fd5b506105e96122ba565b6040516105f69190612fd1565b60405180910390f35b34801561060b57600080fd5b506106146122c4565b6040516106219190612fd1565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190612f91565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f423be4371be317774907e71b8ade0ef37db8e61ba49762d5aa18ac368ab399ce60405160405180910390a250565b6000600454905090565b60006107a9610759836122ce565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b9050919050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615151461086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490612f31565b60405180910390fd5b600081116108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a790612fb1565b60405180910390fd5b60006108ba6124b4565b9050818173ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b91906128f4565b101561097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390612ed1565b60405180910390fd5b6109d8610988336122ce565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008173ffffffffffffffffffffffffffffffffffffffff16638b32fa236000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518263ffffffff1660e01b8152600401610a999190612fd1565b60206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906128f4565b905080831115610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2590612f51565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634346f03e856040518263ffffffff1660e01b8152600401610b699190612fd1565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb991906128f4565b905060004790508373ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b8152600401610bf99190612fd1565b602060405180830381600087803b158015610c1357600080fd5b505af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906128f4565b506000610c61824761257390919063ffffffff16565b9050610cb7836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461257390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d89573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f9f167690f6f00e8e808e35862cdeaf34a0841f5fbdfcd2847e5efe7ea97d94d8826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051610e13929190612fec565b60405180910390a2505050505050565b6000600354905090565b60003411610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6790612e51565b60405180910390fd5b600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610f685760016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a60405160405180910390a25b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216003546040518263ffffffff1660e01b8152600401610fcc9190612e36565b60206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061276b565b905060008273ffffffffffffffffffffffffffffffffffffffff166321f8a7216004546040518263ffffffff1660e01b815260040161105b9190612e36565b60206040518083038186803b15801561107357600080fd5b505afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab919061276b565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110e89190612d44565b60206040518083038186803b15801561110057600080fd5b505afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113891906128f4565b90508273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111d69190612d44565b60206040518083038186803b1580156111ee57600080fd5b505afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122691906128f4565b9050600061123d838361257390919063ffffffff16565b905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506112d9826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461249e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506113ae6009546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015484612589565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff167f3877d5db8b1acb5d5192548366adcabea5b036233d0be9fc10723a5188d900ec83346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460405161147e93929190613015565b60405180910390a250505050505050565b6000600954905090565b6000600654905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152890612e71565b60405180910390fd5b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff5f288d38a0ed55af225423bee9548aa468ab6dea83b52ad20bcf3ac5dab8f99816040516115a09190612d44565b60405180910390a150565b60008473ffffffffffffffffffffffffffffffffffffffff166115cc6124b4565b73ffffffffffffffffffffffffffffffffffffffff1614611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161990612e91565b60405180910390fd5b600061164e629896806116406006548861262490919063ffffffff16565b61263a90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff1660e01b815260040161168b929190612df2565b602060405180830381600087803b1580156116a557600080fd5b505af11580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd91906127d0565b61171c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171390612f71565b60405180910390fd5b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98773ffffffffffffffffffffffffffffffffffffffff166323e30c8b338989868a8a6040518763ffffffff1660e01b815260040161178096959493929190612d96565b602060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d29190612822565b14611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990612ef1565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd8830611843858a61249e90919063ffffffff16565b6040518463ffffffff1660e01b815260040161186193929190612d5f565b602060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b391906127d0565b6118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e990612f11565b60405180910390fd5b600061191d6103e861190f6007548561262490919063ffffffff16565b61263a90919063ffffffff16565b90506119348160085461249e90919063ffffffff16565b600881905550611961611950828461257390919063ffffffff16565b60095461249e90919063ffffffff16565b60098190555060019250505095945050505050565b60006119806124b4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146119b9576000611a43565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119f29190612d44565b60206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4291906128f4565b5b9050919050565b600160009054906101000a900460ff16611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612eb1565b60405180910390fd5b611aa16124b4565b73ffffffffffffffffffffffffffffffffffffffff16636f4a2cd0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ae857600080fd5b505af1158015611afc573d6000803e3d6000fd5b50505050507f1af28763becf183648e30b61aaed9abcc7ca1d3a5df4f6262eb7017c8aa0ee8f3334604051611b32929190612df2565b60405180910390a1565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc190612e71565b60405180910390fd5b806004819055507f6b878384df46dc11858764f1f9c6cc4c3a36c9bf274b94dec32e34ff184b8a0e81604051611c009190612e36565b60405180910390a150565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611c636124b4565b73ffffffffffffffffffffffffffffffffffffffff16638b32fa23611c878461074b565b6040518263ffffffff1660e01b8152600401611ca39190612fd1565b60206040518083038186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf391906128f4565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90612f91565b60405180910390fd5b806007819055507f5661f12da4a79b3526fc7ae1f14502abaf15eb53edc7ff7dd8bd0551899684b981604051611dea9190612fd1565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7c90612f91565b60405180910390fd5b806006819055507f23428688d5098d154855838834462604dabd11d308ae787f18d5ad5843231d0981604051611ebb9190612fd1565b60405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff16611ee76124b4565b73ffffffffffffffffffffffffffffffffffffffff1614611f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3490612e91565b60405180910390fd5b611f6762989680611f596006548561262490919063ffffffff16565b61263a90919063ffffffff16565b905092915050565b6000611f796124b4565b73ffffffffffffffffffffffffffffffffffffffff1663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b158015611fbe57600080fd5b505afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff691906128f4565b905090565b60006120056124b4565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161203d9190612d44565b60206040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208d91906128f4565b905090565b60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211790612e71565b60405180910390fd5b806003819055507fac5571d3d68f716a90b62e1650ea8962eece2a46bd06ec284f96bbc9ad94e0ae816040516121569190612e36565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e890612f91565b60405180910390fd5b6000600854905060006008819055506122086124b4565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612264929190612df2565b602060405180830381600087803b15801561227e57600080fd5b505af1158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b691906127d0565b5050565b6000600854905090565b6000600754905090565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515146123335760009050612499565b600061233d6124b4565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123759190612d44565b60206040518083038186803b15801561238d57600080fd5b505afa1580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c591906128f4565b905060008114156123da576000915050612499565b612495816124876124376000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460095461257390919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461262490919063ffffffff16565b61263a90919063ffffffff16565b9150505b919050565b600081836124ac919061306e565b905092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7216004546040518263ffffffff1660e01b81526004016125199190612e36565b60206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612569919061276b565b9050809250505090565b60008183612581919061314f565b905092915050565b60008083141561259b5783905061261c565b60008214156125ac5783905061261c565b61261961260a6125d7856125c9868a61262490919063ffffffff16565b61263a90919063ffffffff16565b6125fc866125ee878a61262490919063ffffffff16565b61263a90919063ffffffff16565b61257390919063ffffffff16565b8561257390919063ffffffff16565b90505b949350505050565b6000818361263291906130f5565b905092915050565b6000818361264891906130c4565b905092915050565b60008135905061265f81613265565b92915050565b60008151905061267481613265565b92915050565b6000815190506126898161327c565b92915050565b60008135905061269e81613293565b92915050565b6000815190506126b381613293565b92915050565b60008083601f8401126126cb57600080fd5b8235905067ffffffffffffffff8111156126e457600080fd5b6020830191508360018202830111156126fc57600080fd5b9250929050565b600081359050612712816132aa565b92915050565b600081359050612727816132c1565b92915050565b60008151905061273c816132c1565b92915050565b60006020828403121561275457600080fd5b600061276284828501612650565b91505092915050565b60006020828403121561277d57600080fd5b600061278b84828501612665565b91505092915050565b600080604083850312156127a757600080fd5b60006127b585828601612650565b92505060206127c685828601612718565b9150509250929050565b6000602082840312156127e257600080fd5b60006127f08482850161267a565b91505092915050565b60006020828403121561280b57600080fd5b60006128198482850161268f565b91505092915050565b60006020828403121561283457600080fd5b6000612842848285016126a4565b91505092915050565b60008060008060006080868803121561286357600080fd5b600061287188828901612703565b955050602061288288828901612650565b945050604061289388828901612718565b935050606086013567ffffffffffffffff8111156128b057600080fd5b6128bc888289016126b9565b92509250509295509295909350565b6000602082840312156128dd57600080fd5b60006128eb84828501612718565b91505092915050565b60006020828403121561290657600080fd5b60006129148482850161272d565b91505092915050565b61292681613183565b82525050565b61293581613195565b82525050565b612944816131a1565b82525050565b6000612956838561304c565b93506129638385846131e7565b61296c83613254565b840190509392505050565b600061298460308361305d565b91507f596f75206d7573742073656e642061206e6f6e2d7a65726f20616d6f756e742060008301527f6f662065746820746f207374616b652e000000000000000000000000000000006020830152604082019050919050565b60006129ea60198361305d565b91507f596f75206d7573742062652061206b6579206d616e61676572000000000000006000830152602082019050919050565b6000612a2a60218361305d565b91507f466c6173684c656e6465723a20556e737570706f727465642063757272656e6360008301527f79000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a9060208361305d565b91507f43616e6e6f74206465706f7369742072657761726473206d616e75616c6c792e6000830152602082019050919050565b6000612ad0602e8361305d565b91507f4e6f7420656e6f75676820636f6c6c61746572616c20617661696c61626c652060008301527f696e20526f636b657420506f6f6c0000000000000000000000000000000000006020830152604082019050919050565b6000612b36601c8361305d565b91507f466c6173684c656e6465723a2043616c6c6261636b206661696c6564000000006000830152602082019050919050565b6000612b7660198361305d565b91507f466c6173684c656e6465723a205265706179206661696c6564000000000000006000830152602082019050919050565b6000612bb660148361305d565b91507f4e6f7468696e67207374616b656420686572652e0000000000000000000000006000830152602082019050919050565b6000612bf660328361305d565b91507f596f752063616e6e6f74207769746864726177206d6f7265204554482074686160008301527f6e20796f752068617665207374616b65642e00000000000000000000000000006020830152604082019050919050565b6000612c5c601c8361305d565b91507f466c6173684c656e6465723a205472616e73666572206661696c6564000000006000830152602082019050919050565b6000612c9c60128361305d565b91507f496e76616c6964207065726d697373696f6e00000000000000000000000000006000830152602082019050919050565b6000612cdc60218361305d565b91507f596f75206d757374207769746864726177206d6f7265207468616e203020455460008301527f48000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b612d3e816131dd565b82525050565b6000602082019050612d59600083018461291d565b92915050565b6000606082019050612d74600083018661291d565b612d81602083018561291d565b612d8e6040830184612d35565b949350505050565b600060a082019050612dab600083018961291d565b612db8602083018861291d565b612dc56040830187612d35565b612dd26060830186612d35565b8181036080830152612de581848661294a565b9050979650505050505050565b6000604082019050612e07600083018561291d565b612e146020830184612d35565b9392505050565b6000602082019050612e30600083018461292c565b92915050565b6000602082019050612e4b600083018461293b565b92915050565b60006020820190508181036000830152612e6a81612977565b9050919050565b60006020820190508181036000830152612e8a816129dd565b9050919050565b60006020820190508181036000830152612eaa81612a1d565b9050919050565b60006020820190508181036000830152612eca81612a83565b9050919050565b60006020820190508181036000830152612eea81612ac3565b9050919050565b60006020820190508181036000830152612f0a81612b29565b9050919050565b60006020820190508181036000830152612f2a81612b69565b9050919050565b60006020820190508181036000830152612f4a81612ba9565b9050919050565b60006020820190508181036000830152612f6a81612be9565b9050919050565b60006020820190508181036000830152612f8a81612c4f565b9050919050565b60006020820190508181036000830152612faa81612c8f565b9050919050565b60006020820190508181036000830152612fca81612ccf565b9050919050565b6000602082019050612fe66000830184612d35565b92915050565b60006040820190506130016000830185612d35565b61300e6020830184612d35565b9392505050565b600060608201905061302a6000830186612d35565b6130376020830185612d35565b6130446040830184612d35565b949350505050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613079826131dd565b9150613084836131dd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130b9576130b86131f6565b5b828201905092915050565b60006130cf826131dd565b91506130da836131dd565b9250826130ea576130e9613225565b5b828204905092915050565b6000613100826131dd565b915061310b836131dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613144576131436131f6565b5b828202905092915050565b600061315a826131dd565b9150613165836131dd565b925082821015613178576131776131f6565b5b828203905092915050565b600061318e826131bd565b9050919050565b60008115159050919050565b6000819050919050565b60006131b682613183565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b61326e81613183565b811461327957600080fd5b50565b61328581613195565b811461329057600080fd5b50565b61329c816131a1565b81146132a757600080fd5b50565b6132b3816131ab565b81146132be57600080fd5b50565b6132ca816131dd565b81146132d557600080fd5b5056fea2646970667358221220e383332a1451936b475e760da857e4c15c68fea676c894944b0b2ba149fc522264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "flashFee(address,uint256)": {
        "details": "The fee to be charged for a given loan.",
        "params": {
          "amount": "The amount of tokens lent.",
          "token": "The loan currency."
        },
        "returns": {
          "_0": "The amount of `token` to be charged for the loan, on top of the returned principal."
        }
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Initiate a flash loan.",
        "params": {
          "amount": "The amount of tokens lent.",
          "data": "Arbitrary data structure, intended to contain user-defined parameters.",
          "receiver": "The receiver of the tokens in the loan, and the receiver of the callback.",
          "token": "The loan currency."
        }
      },
      "maxFlashLoan(address)": {
        "details": "The amount of currency available to be lent.",
        "params": {
          "token": "The loan currency."
        },
        "returns": {
          "_0": "The amount of `token` that can be borrowed."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1010,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "stakers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Staker)1005_storage)"
      },
      {
        "astId": 1012,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "enable_manual_rewards",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1014,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_pool_storage_key_manager",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1016,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_storage_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1025,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_deposit_pool_address_storage_key",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1034,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "rocket_reth_token_address_storage_key",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1036,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "flash_loan_fee_manager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1039,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "flash_loan_fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1042,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "flash_loan_dev_cut",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1045,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "flash_loan_dev_fees",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1048,
        "contract": "contracts/RocketStake.sol:RocketStake",
        "label": "flash_loan_staker_fees",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Staker)1005_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RocketStake.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1005_storage"
      },
      "t_struct(Staker)1005_storage": {
        "encoding": "inplace",
        "label": "struct RocketStake.Staker",
        "members": [
          {
            "astId": 1000,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "flash_loan_fee_entitlement_floor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1002,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "staked_reth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1004,
            "contract": "contracts/RocketStake.sol:RocketStake",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}